{"version":3,"file":"Logger.js","sourceRoot":"","sources":["../../src/classes/Logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { LogLevel, RCEEvent } from \"../constants\";\r\nimport { inspect } from \"util\";\r\nimport { type LoggerOptions } from \"../types\";\r\nimport fs from \"fs\";\r\nimport RCEManager from \"./RCEManager\";\r\n\r\nenum ConsoleColor {\r\n  Reset = \"\\x1b[0m\",\r\n  FgRed = \"\\x1b[31m\",\r\n  FgGreen = \"\\x1b[32m\",\r\n  FgYellow = \"\\x1b[33m\",\r\n  FgCyan = \"\\x1b[36m\",\r\n  FgMagenta = \"\\x1b[35m\",\r\n}\r\n\r\ninterface LogType {\r\n  prefix: string;\r\n  emoji: string;\r\n  color: string;\r\n}\r\n\r\nexport default class Logger {\r\n  private emitter: RCEManager;\r\n  private level: LogLevel;\r\n  private file: string | undefined;\r\n\r\n  public constructor(emitter: RCEManager, opts: LoggerOptions) {\r\n    this.level = opts.logLevel ?? LogLevel.Info; // Default to Info if not specified\r\n    this.file = opts.logFile;\r\n    this.emitter = emitter;\r\n  }\r\n\r\n  private logToFile(type: string, content: any): void {\r\n    if (this.file) {\r\n      const stats = fs.statSync(this.file);\r\n      if (stats.size > 300000000) {\r\n        fs.writeFileSync(this.file, \"\");\r\n      }\r\n\r\n      const logMessage = typeof content === \"string\"\r\n        ? `[${type.toUpperCase()}]: ${content}\\n`\r\n        : `[${type.toUpperCase()}]: ${inspect(content, { depth: 5 })}\\n`;\r\n\r\n      fs.appendFileSync(this.file, logMessage);\r\n    }\r\n  }\r\n\r\n  private format(content: any): string {\r\n    return typeof content === \"string\" ? content : inspect(content, { depth: 5 });\r\n  }\r\n\r\n  private log(level: LogLevel, type: string, content: any, logType: LogType): void {\r\n    if (this.level !== LogLevel.None && level <= this.level) {\r\n      const date = new Date();\r\n      const timestamp = date.toLocaleTimeString([], { hour12: false });\r\n\r\n      const padding = ' '.repeat(Math.max(0, 15 - logType.prefix.length));\r\n      const formattedMessage = `\\x1b[90m[${timestamp}]\\x1b[0m ${logType.color}${logType.prefix}${padding}${logType.emoji}${ConsoleColor.Reset}`;\r\n\r\n      // Output to console\r\n      console.log(formattedMessage, this.format(content));\r\n\r\n      // Log to file and emit events\r\n      this.logToFile(type, content);\r\n      this.emitter.emit(RCEEvent.Log, { level, content: this.format(content) });\r\n    }\r\n  }\r\n\r\n  public warn(content: any): void {\r\n    const logType: LogType = {\r\n      prefix: \"[WARNING]\",\r\n      emoji: \"⚠️\",\r\n      color: ConsoleColor.FgYellow,\r\n    };\r\n    this.log(LogLevel.Warn, \"warn\", content, logType);\r\n  }\r\n\r\n  public info(content: any): void {\r\n    const logType: LogType = {\r\n      prefix: \"[INFO]\",\r\n      emoji: \"💬\",\r\n      color: ConsoleColor.FgCyan,\r\n    };\r\n    this.log(LogLevel.Info, \"info\", content, logType);\r\n  }\r\n\r\n  public debug(content: any): void {\r\n    const logType: LogType = {\r\n      prefix: \"[DEBUG]\",\r\n      emoji: \"🔧\",\r\n      color: ConsoleColor.FgMagenta,\r\n    };\r\n    this.log(LogLevel.Debug, \"debug\", content, logType);\r\n  }\r\n\r\n  public error(content: any): void {\r\n    const logType: LogType = {\r\n      prefix: \"[ERROR]\",\r\n      emoji: \"❌\",\r\n      color: ConsoleColor.FgRed,\r\n    };\r\n    this.log(LogLevel.Error, \"error\", content, logType);\r\n  }\r\n}\r\n"]}