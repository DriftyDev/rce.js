{"version":3,"file":"RCEManager.js","sourceRoot":"","sources":["../../src/classes/RCEManager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AuthOptions,\n  Auth,\n  RustServer,\n  WebsocketRequest,\n  WebsocketMessage,\n  ServerOptions,\n} from \"../types\";\nimport {\n  GPORTALRoutes,\n  GPORTALWebsocketTypes,\n  RCEEvent,\n  QuickChat,\n} from \"../constants\";\nimport { WebSocket } from \"ws\";\nimport { writeFileSync, readFileSync } from \"fs\";\nimport Logger from \"./Logger\";\nimport { RCEEvents } from \"../types\";\nimport Helper from \"./Helper\";\n\nexport default class RCEManager extends RCEEvents {\n  private logger: Logger;\n  private auth?: Auth = {\n    refresh_token: \"\",\n    access_token: \"\",\n    token_type: \"Bearer\",\n    expires_in: 0,\n  };\n  private servers: Map<string, RustServer> = new Map();\n  private socket?: WebSocket;\n  private requests: Map<string, WebsocketRequest> = new Map();\n  private queue: (() => void)[] = [];\n  private authMethod: {\n    method: \"file\" | \"manual\";\n    file: string;\n    refreshToken: string;\n  } = {\n    method: \"manual\",\n    refreshToken: \"\",\n    file: \"\",\n  };\n\n  /*\n    * Create a new RCEManager instance\n\n    * @param {AuthOptions} auth - The authentication options\n    * @memberof RCEManager\n    * @example\n    * const rce = new RCEManager({ refreshToken: \"\", servers: [{ identifier: \"server1\", region: \"US\", serverId: 12345 }], logLevel: LogLevel.INFO, authMethod: \"manual\" });\n    * @example\n    * const rce = new RCEManager({ servers: [{ identifier: \"server1\", region: \"US\", serverId: 12345 }], logLevel: LogLevel.INFO, authMethod: \"file\", file: \"auth.txt\" });\n  */\n  public constructor(auth: AuthOptions) {\n    super();\n\n    this.logger = new Logger(auth.logLevel);\n\n    this.authMethod.refreshToken = auth.refreshToken;\n    this.authMethod.file = auth.file || \"auth.txt\";\n    this.authMethod.method = auth.authMethod || \"manual\";\n\n    if (this.authMethod.method === \"manual\") {\n      if (!auth.refreshToken) {\n        throw new Error(\n          \"No refreshToken argument provided; required for manual auth\"\n        );\n      }\n\n      this.auth.refresh_token = auth.refreshToken;\n    }\n\n    if (this.authMethod.method === \"file\") {\n      try {\n        const data = readFileSync(this.authMethod.file, \"utf-8\");\n        this.auth.refresh_token = data;\n      } catch (err) {\n        this.logger.warn(\"File not found; creating new auth file\");\n        writeFileSync(this.authMethod.file, \"REPLACE_WITH_REFRESH_TOKEN\");\n        throw new Error(\"No refresh token provided in file; please add it\");\n      }\n    }\n\n    const servers = auth.servers || [];\n    servers.forEach((server) => {\n      this.servers.set(server.identifier, {\n        identifier: server.identifier,\n        serverId: server.serverId,\n        region: server.region,\n        refreshPlayers: server.refreshPlayers || 0,\n        players: [],\n        added: false,\n      });\n    });\n  }\n\n  /*\n    * Login to GPORTAL and establish a websocket connection\n\n    * @param {number} [timeout=60_000] - The timeout for the websocket connection\n    * @returns {Promise<void>}\n    * @memberof RCEManager\n    * @example\n    * await rce.init();\n    * @example\n    * await rce.init(30_000);\n  */\n  public async init(timeout: number = 60_000) {\n    await this.authenticate(timeout);\n  }\n\n  private async authenticate(timeout: number) {\n    this.logger.debug(\"Attempting to authenticate\");\n\n    const s = await this.refreshToken();\n    if (s) {\n      this.logger.info(\"Authenticated successfully\");\n      await this.connectWebsocket(timeout);\n    } else {\n      this.logger.error(\"Failed to authenticate\");\n      setTimeout(() => this.authenticate(timeout), 60_000);\n    }\n  }\n\n  private async refreshToken() {\n    this.logger.debug(\"Attempting to refresh token\");\n\n    if (!this.auth?.refresh_token) {\n      this.logger.error(\"Failed to refresh token: No refresh token\");\n      return false;\n    }\n\n    try {\n      const response = await fetch(GPORTALRoutes.REFRESH, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n        },\n        body: new URLSearchParams({\n          grant_type: \"refresh_token\",\n          client_id: \"website\",\n          refresh_token: this.auth.refresh_token,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to refresh token: ${response.statusText}`);\n      }\n\n      this.auth = await response.json();\n      setTimeout(() => this.refreshToken(), this.auth.expires_in * 1000);\n\n      if (this.authMethod.method === \"file\" && this.authMethod.file) {\n        this.logger.debug(\"Writing auth data to file\");\n        writeFileSync(this.authMethod.file, this.auth.refresh_token);\n      }\n\n      this.logger.debug(\"Token refreshed successfully\");\n      return true;\n    } catch (err) {\n      this.logger.error(`Failed to refresh token: ${err}`);\n      return false;\n    }\n  }\n\n  private async connectWebsocket(timeout: number) {\n    this.logger.debug(\"Connecting to websocket\");\n\n    this.socket = new WebSocket(GPORTALRoutes.WEBSOCKET, [\"graphql-ws\"], {\n      headers: {\n        origin: GPORTALRoutes.ORIGIN,\n        host: \"www.g-portal.com\",\n      },\n      timeout,\n    });\n\n    this.socket.on(\"open\", async () => {\n      this.logger.debug(\"Websocket connection established\");\n      await this.authenticateWebsocket();\n      await this.processQueue();\n\n      this.servers.forEach(async (server) => {\n        if (!server.added) await this.addServer(server);\n      });\n    });\n\n    this.socket.on(\"error\", (err) => {\n      this.logger.error(`Websocket error: ${err.message}`);\n      this.socket?.close();\n      this.socket = undefined;\n      this.connectWebsocket(timeout);\n    });\n\n    this.socket.on(\"close\", (code: number, reason: string) => {\n      this.logger.error(`Websocket closed: ${code} ${reason}`);\n      this.socket = undefined;\n      this.connectWebsocket(timeout);\n    });\n\n    this.socket.on(\"message\", (data) => {\n      try {\n        const message: WebsocketMessage = JSON.parse(data.toString());\n\n        if (message.type === \"ka\") return;\n\n        this.logger.debug(`Received message: ${JSON.stringify(message)}`);\n\n        if (message.type === \"error\") {\n          return this.logger.error(\n            `Websocket error: ${message?.payload?.message}`\n          );\n        }\n\n        if (message.type === \"connection_ack\") {\n          return this.logger.debug(\"Websocket authenticated successfully\");\n        }\n\n        if (message.type === \"data\") {\n          const request = this.requests.get(message.id);\n\n          if (!request) {\n            return this.logger.error(\n              `Failed to handle message: No request found for ID ${message.id}`\n            );\n          }\n\n          const server = this.servers.get(request.identifier);\n\n          if (!server) {\n            return this.logger.error(\n              `Failed to handle message: No server found for ID ${request.identifier}`\n            );\n          }\n\n          this.handleWebsocketMessage(message, server);\n        }\n      } catch (err) {\n        this.logger.error(`Failed to handle message: ${err}`);\n      }\n    });\n  }\n\n  private async authenticateWebsocket() {\n    this.logger.debug(\"Attempting to authenticate websocket\");\n\n    if (!this.auth?.access_token) {\n      return this.logger.error(\n        \"Failed to authenticate websocket: No access token\"\n      );\n    }\n\n    this.socket.send(\n      JSON.stringify({\n        type: GPORTALWebsocketTypes.INIT,\n        payload: {\n          authorization: this.auth.access_token,\n        },\n      })\n    );\n\n    setInterval(() => {\n      if (this.socket && this.socket.OPEN) {\n        this.logger.debug(\"Sending keep-alive message\");\n        this.socket.send(JSON.stringify({ type: \"ka\" }));\n      }\n    }, 30_000);\n  }\n\n  private handleWebsocketMessage(\n    message: WebsocketMessage,\n    server: RustServer\n  ) {\n    const logMessages: string[] =\n      message?.payload?.data?.consoleMessages?.message?.split(\n        /^\\d{2}\\/\\d{2}\\/\\d{4} \\d{2}:\\d{2}:\\d{2}:LOG:DEFAULT: /gm\n      );\n\n    if (logMessages.length > 2) return;\n\n    logMessages.forEach((logMessage) => {\n      const log = logMessage.trim();\n      if (!log || log.startsWith(\"Executing console system command\")) {\n        return;\n      }\n\n      // Population\n      if (log.startsWith(\"<slot:\")) {\n        const players = log\n          .match(/\"(.*?)\"/g)\n          .map((ign) => ign.replace(/\"/g, \"\"));\n        players.shift();\n\n        this.emit(RCEEvent.PLAYERLIST_UPDATE, { server, players });\n\n        return this.servers.set(server.identifier, {\n          ...server,\n          players,\n        });\n      }\n\n      this.emit(RCEEvent.MESSAGE, { server, message: log });\n      this.logger.debug(`Received message: ${log} from ${server.identifier}`);\n\n      // PLAYER_KILL event\n      if (log.includes(\" was killed by \")) {\n        const [victim, killer] = log\n          .split(\" was killed by \")\n          .map((str) => str.trim());\n\n        const victimData = Helper.getKillInformation(victim);\n        const killerData = Helper.getKillInformation(killer);\n\n        this.emit(RCEEvent.PLAYER_KILL, {\n          server,\n          victim: victimData,\n          killer: killerData,\n        });\n      }\n\n      // VENDING_MACHINE_NAME event\n      const vendingMachineMatch = log.match(\n        /\\[VENDING MACHINE\\] Player \\[ ([^\\]]+) \\] changed name from \\[ ([^\\]]+) \\] to \\[ ([^\\]]+) \\]/\n      );\n      if (vendingMachineMatch) {\n        const ign = vendingMachineMatch[1];\n        const oldName = vendingMachineMatch[2];\n        const newName = vendingMachineMatch[3];\n\n        this.emit(RCEEvent.VENDING_MACHINE_NAME, {\n          server,\n          ign,\n          oldName,\n          newName,\n        });\n      }\n\n      // QUICK_CHAT event\n      if (log.includes(\"[CHAT LOCAL]\") || log.includes(\"[CHAT SERVER]\")) {\n        const type = log.includes(\"[CHAT LOCAL]\") ? \"local\" : \"server\";\n        const msg = log.split(\" : \")[1];\n        const ign = log.includes(\"[CHAT LOCAL]\")\n          ? log.split(\"[CHAT LOCAL] \")[1].split(\" : \")[0]\n          : log.split(\"[CHAT SERVER] \")[1].split(\" : \")[0];\n\n        this.emit(RCEEvent.QUICK_CHAT, {\n          server,\n          type,\n          ign,\n          message: msg as QuickChat,\n        });\n      }\n\n      // PLAYER_SUICIDE event\n      if (log.includes(\"was suicide by Suicide\")) {\n        const ign = log.split(\" was suicide by Suicide\")[0];\n\n        this.emit(RCEEvent.PLAYER_SUICIDE, { server, ign });\n      }\n\n      // PLAYER_RESPAWNED event\n      if (log.includes(\"has entered the game\")) {\n        const ign = log.split(\" [\")[0];\n        const platform = log.includes(\"[xboxone]\") ? \"XBL\" : \"PS\";\n\n        this.emit(RCEEvent.PLAYER_RESPAWNED, { server, ign, platform });\n      }\n\n      // PLAYER_JOINED event\n      if (log.includes(\"joined [xboxone]\") || log.includes(\"joined [ps4]\")) {\n        const ign = log.split(\" joined \")[0];\n        const platform = log.includes(\"[xboxone]\") ? \"XBL\" : \"PS\";\n\n        this.emit(RCEEvent.PLAYER_JOINED, { server, ign, platform });\n      }\n\n      // PLAYER_ROLE_ADD event\n      const roleMatch = log.match(/\\[(.*?)\\]/g);\n      if (roleMatch && log.includes(\"Added\")) {\n        const ign = roleMatch[1];\n        const role = roleMatch[2];\n\n        this.emit(RCEEvent.PLAYER_ROLE_ADD, { server, ign, role });\n      }\n\n      // ITEM_SPAWN event\n      const itemSpawnMatch = log.match(/\\bgiving (\\w+) (\\d+) x ([\\w\\s]+)\\b/);\n      if (itemSpawnMatch) {\n        const ign = itemSpawnMatch[1];\n        const quantity = Number(itemSpawnMatch[2]);\n        const item = itemSpawnMatch[3];\n\n        this.emit(RCEEvent.ITEM_SPAWN, { server, ign, item, quantity });\n      }\n\n      // NOTE_EDIT event\n      const noteMatch = log.match(\n        /\\[NOTE PANEL\\] Player \\[ ([^\\]]+) \\] changed name from \\[\\s*([\\s\\S]*?)\\s*\\] to \\[\\s*([\\s\\S]*?)\\s*\\]/\n      );\n      if (noteMatch) {\n        const ign = noteMatch[1].trim();\n        const oldContent = noteMatch[2].trim();\n        const newContent = noteMatch[3].trim();\n\n        this.emit(RCEEvent.NOTE_EDIT, { server, ign, oldContent, newContent });\n      }\n\n      // EVENT_START event\n      if (log.includes(\"[event]\")) {\n        let event;\n\n        if (log.includes(\"event_airdrop\")) {\n          event = \"Airdrop\";\n        }\n\n        if (log.includes(\"event_cargoship\")) {\n          event = \"Cargo Ship\";\n        }\n\n        if (log.includes(\"event_cargoheli\")) {\n          event = \"Chinook\";\n        }\n\n        if (log.includes(\"event_helicopter\")) {\n          event = \"Patrol Helicopter\";\n        }\n\n        this.emit(RCEEvent.EVENT_START, { server, event });\n      }\n    });\n  }\n\n  private async resolveServerId(\n    region: \"US\" | \"EU\",\n    serverId: number\n  ): Promise<number | undefined> {\n    if (!this.auth?.access_token) {\n      this.logger.error(\"Failed to resolve server ID: No access token\");\n      return undefined;\n    }\n\n    try {\n      const response = await fetch(GPORTALRoutes.COMMAND, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `${this.auth.token_type} ${this.auth.access_token}`,\n        },\n        body: JSON.stringify({\n          operationName: \"sid\",\n          variables: {\n            gameserverId: serverId,\n            region,\n          },\n          query:\n            \"query sid($gameserverId: Int!, $region: REGION!) {\\n  sid(gameserverId: $gameserverId, region: $region)\\n}\",\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to resolve server ID: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data?.data?.sid as number;\n    } catch (err) {\n      this.logger.error(`Failed to resolve server ID: ${err}`);\n      return undefined;\n    }\n  }\n\n  /*\n    * Send a command to a Rust server\n\n    * @param {string} identifier - The server identifier\n    * @param {string} command - The command to send\n    * @returns {Promise<boolean>}\n    * @memberof RCEManager\n    * @example\n    * await rce.sendCommand(\"server1\", \"RemoveOwner username\");\n    * @example\n    * await rce.sendCommand(\"server1\", \"BanID username\");\n  */\n  public async sendCommand(\n    identifier: string,\n    command: string\n  ): Promise<boolean> {\n    if (!this.auth?.access_token) {\n      this.logger.error(\"Failed to send command: No access token\");\n      return false;\n    }\n\n    if (!this.socket || !this.socket.OPEN) {\n      this.logger.error(\"Failed to send command: No websocket connection\");\n      return false;\n    }\n\n    const server = this.servers.get(identifier);\n\n    if (!server) {\n      this.logger.error(\n        `Failed to send command: No server found for ID ${identifier}`\n      );\n      return false;\n    }\n\n    this.logger.debug(`Sending command \"${command}\" to ${server.identifier}`);\n\n    const payload = {\n      operationName: \"sendConsoleMessage\",\n      variables: {\n        sid: server.serverId,\n        region: server.region,\n        message: command,\n      },\n      query:\n        \"mutation sendConsoleMessage($sid: Int!, $region: REGION!, $message: String!) {\\n  sendConsoleMessage(rsid: {id: $sid, region: $region}, message: $message) {\\n    ok\\n    __typename\\n  }\\n}\",\n    };\n\n    try {\n      const response = await fetch(GPORTALRoutes.COMMAND, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `${this.auth.token_type} ${this.auth.access_token}`,\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send command: ${response.statusText}`);\n      }\n\n      this.logger.debug(`Command \"${command}\" sent successfully`);\n\n      return true;\n    } catch (err) {\n      this.logger.error(`Failed to send command: ${err}`);\n      return false;\n    }\n  }\n\n  /*\n    * Add a Rust server to the manager\n\n    * @param {ServerOptions} opts - The server options\n    * @returns {Promise<void>}\n    * @memberof RCEManager\n    * @example\n    * await rce.addServer({ identifier: \"server1\", region: \"US\", serverId: 12345 });\n    * @example\n    * await rce.addServer({ identifier: \"server2\", region: \"EU\", serverId: 54321, refreshPlayers: 5 });\n  */\n  public async addServer(opts: ServerOptions) {\n    if (!this.socket || !this.socket.OPEN) {\n      this.queue.push(() => this.addServer(opts));\n      return this.logger.warn(\n        \"Failed to add server due to no websocket connection; added to queue\"\n      );\n    }\n\n    this.logger.debug(`Adding server \"${opts.identifier}\"`);\n\n    const sid = await this.resolveServerId(opts.region, opts.serverId);\n\n    this.servers.set(opts.identifier, {\n      identifier: opts.identifier,\n      serverId: sid,\n      region: opts.region,\n      refreshPlayers: opts.refreshPlayers || 0,\n      players: [],\n      added: true,\n    });\n\n    const payload = {\n      type: GPORTALWebsocketTypes.START,\n      payload: {\n        variables: { sid, region: opts.region },\n        extensions: {},\n        operationName: \"consoleMessages\",\n        query: `subscription consoleMessages($sid: Int!, $region: REGION!) {\n          consoleMessages(rsid: {id: $sid, region: $region}) {\n            stream\n            message\n            __typename\n          }\n        }`,\n      },\n      id: opts.identifier,\n    };\n\n    this.requests.set(opts.identifier, {\n      sid,\n      region: opts.region,\n      identifier: opts.identifier,\n    });\n\n    this.socket.send(JSON.stringify(payload));\n\n    if (opts.refreshPlayers) {\n      this.sendCommand(opts.identifier, \"Users\");\n\n      setInterval(() => {\n        if (this.servers.has(opts.identifier)) {\n          this.sendCommand(opts.identifier, \"Users\");\n        }\n      }, opts.refreshPlayers * 60_000);\n    }\n\n    this.logger.info(`Server \"${opts.identifier}\" added successfully`);\n  }\n\n  /*\n    * Get a Rust server from the manager\n\n    * @param {string}\n    * @returns {RustServer}\n    * @memberof RCEManager\n    * @example\n    * const server = rce.getServer(\"server1\");\n  */\n  public getServer(identifier: string) {\n    return this.servers.get(identifier);\n  }\n\n  /*\n    * Remove a Rust server from the manager\n\n    * @param {string}\n    * @memberof RCEManager\n    * @example\n    * rce.removeServer(\"server1\");\n    * @example\n    * rce.removeServer(\"my-solo-duo-trio-3x\");\n  */\n  public removeServer(identifier: string) {\n    this.servers.delete(identifier);\n\n    const request = this.requests.get(identifier);\n    if (request) this.requests.delete(request.identifier);\n\n    this.logger.info(`Server \"${identifier}\" removed successfully`);\n  }\n\n  /*\n    * Get all Rust servers from the manager\n\n    * @returns {Map<string, RustServer>}\n    * @memberof RCEManager\n    * @example\n    * const servers = rce.getServers();\n    * for (const [identifier, server] of servers) {\n    *  console.log(identifier, server);\n    * }\n  */\n  public getServers() {\n    return this.servers;\n  }\n\n  private processQueue() {\n    while (this.queue.length) {\n      const callback = this.queue.shift();\n      if (callback) callback();\n    }\n  }\n}\n"]}