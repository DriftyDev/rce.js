{"version":3,"file":"Manager.js","sourceRoot":"","sources":["../src/Manager.ts"],"names":[],"mappings":";;;;;AAAA,uDAAsC;AACtC,6DAA4C;AAC5C,gEAA8C;AAC9C,6DAAwC;AAExC,mCAAsC;AAEtC,8EAAsD;AAEtD,MAAM,eAAgB,SAAQ,qBAAY;IACxC,IAAI,CACF,KAAQ,EACR,GAAG,IAAkE;QAErE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CACA,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CACF,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CACD,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AAED,MAAqB,UAAU;IACrB,KAAK,CAAc;IACnB,OAAO,CAAgB;IACxB,MAAM,CAAU;IAChB,MAAM,GAAoB,IAAI,eAAe,EAAE,CAAC;IAChD,OAAO,CAAgB;IAE9B,gBAAsB,CAAC;IAEvB;;;;OAIG;IACI,KAAK,CAAC,IAAI,CAAC,IAAiB,EAAE,MAAqB;QACxD,IAAI,CAAC,MAAM;YACT,MAAM,EAAE,QAAQ,IAAI,IAAI,gBAAS,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,CAAC,KAAK,GAAG,IAAI,cAAW,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAErD,IAAI,CAAC,OAAO,GAAG,IAAI,gBAAa,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAEvB,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAa,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACnE,CAAC;IAED;;;OAGG;IACI,OAAO;QACZ,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QACrB,wBAAc,CAAC,OAAO,EAAE,CAAC;QAEzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;IACjD,CAAC;CACF;AAvCD,6BAuCC","sourcesContent":["import GPortalAuth from \"./auth/Auth\";\nimport GPortalSocket from \"./socket/Socket\";\nimport ServerManager from \"./servers/Servers\";\nimport RCELogger from \"./logger/Logger\";\nimport type { AuthOptions, LoggerOptions, RCEEventTypes } from \"./interfaces\";\nimport { EventEmitter } from \"events\";\nimport { ILogger } from \"./logger/interfaces\";\nimport CommandHandler from \"./servers/CommandHandler\";\n\nclass RCEEventManager extends EventEmitter {\n  emit<K extends keyof RCEEventTypes>(\n    event: K,\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\n  ): boolean {\n    return super.emit(event, ...args);\n  }\n\n  on<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.on(event, listener);\n  }\n\n  once<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.once(event, listener);\n  }\n\n  off<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.off(event, listener);\n  }\n}\n\nexport default class RCEManager {\n  private _auth: GPortalAuth;\n  private _socket: GPortalSocket;\n  public logger: ILogger;\n  public events: RCEEventManager = new RCEEventManager();\n  public servers: ServerManager;\n\n  public constructor() {}\n\n  /**\n   *\n   * @param auth {AuthOptions} - The authentication options for the GPortal API\n   * @returns {Promise<void>}\n   */\n  public async init(auth: AuthOptions, logger: LoggerOptions) {\n    this.logger =\n      logger?.instance || new RCELogger(logger?.level, logger?.file);\n\n    this._auth = new GPortalAuth(this);\n    await this._auth.login(auth.username, auth.password);\n\n    this._socket = new GPortalSocket(this, this._auth);\n    this._socket.connect();\n\n    this.servers = new ServerManager(this, this._auth, this._socket);\n  }\n\n  /**\n   * Gracefully close the RCE Manager\n   * @returns {void}\n   */\n  public destroy() {\n    this._socket.close();\n    this.servers.removeAll();\n    this._auth.destroy();\n    CommandHandler.destroy();\n\n    this.logger.info(\"RCE.JS - Closed Gracefully\");\n  }\n}\n"]}