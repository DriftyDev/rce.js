{"version":3,"file":"manager.js","sourceRoot":"","sources":["../src/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  type IServerOptions,\n  type IServer,\n  type IEvent,\n  RCEEvent,\n  type IRustServerInformation,\n  type IOptions,\n  LogLevel,\n  type ILogger,\n} from \"./types\";\nimport SocketManager from \"./socket/socketManager\";\nimport { EventEmitter } from \"events\";\nimport CommandManager from \"./commands/commandManager\";\nimport Logger from \"./logger\";\n\nexport default class RCEManager extends EventEmitter {\n  private servers: Map<string, IServer> = new Map();\n  public logger: ILogger;\n\n  /**\n   *\n   * @param opts Options for the RCEManager instance.\n   * @param opts.logLevel The log level for the logger. Default is LogLevel.Info\n   * Creates an instance of RCEManager.\n   */\n  public constructor(opts: IOptions) {\n    super();\n\n    this.logger =\n      opts.logger?.instance ||\n      new Logger(opts.logger?.level, opts.logger?.file);\n\n    this.on(RCEEvent.Error, (payload) => {\n      if (payload.server) {\n        this.logger.error(`[${payload.server.identifier}] ${payload.error}`);\n      } else {\n        this.logger.error(payload.error);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param options Options for the server to be added.\n   * @param options.identifier Unique identifier for the server.\n   * @param options.state Any additional information for the server.\n   * @param options.rcon RCON connection options for the server.\n   * @param options.rcon.port RCON port for the server.\n   * @param options.rcon.password RCON password for the server.\n   * @param options.rcon.host RCON host for the server.\n   * Creates a new server instance and adds it to the manager.\n   * @returns void\n   */\n  public addServer(options: IServerOptions): void {\n    this.logger.debug(`[${options.identifier}] Attempting to add server...`);\n\n    if (this.servers.has(options.identifier)) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${options.identifier}\" already exists.`,\n      });\n      return;\n    }\n\n    const socketManager = new SocketManager(this, options);\n    const socket = socketManager.getSocket();\n    const server: IServer = {\n      identifier: options.identifier,\n      socket,\n      socketManager,\n      flags: [],\n      intervals: {\n        playerRefreshing: setInterval(() => {\n          this.updatePlayers(options.identifier);\n        }, 60_000),\n\n        frequencyRefreshing: setInterval(() => {\n          this.updateBroadcasters(options.identifier);\n        }, 60_000),\n\n        gibRefreshing: setInterval(() => {\n          this.fetchGibs(options.identifier);\n        }, 60_000),\n      },\n      state: options.state || [],\n      connectedPlayers: [],\n      frequencies: [],\n    };\n\n    this.servers.set(options.identifier, server);\n    this.on(RCEEvent.Ready, (_payload) => {\n      this.updatePlayers(options.identifier);\n      this.updateBroadcasters(options.identifier);\n      this.fetchGibs(options.identifier);\n\n      this.logger.info(`[${options.identifier}] Server added successfully.`);\n    });\n  }\n\n  /**\n   *\n   * @param server The server object to update.\n   * @param server.identifier Unique identifier for the server.\n   * @returns void\n   * Updates an existing server instance in the manager.\n   */\n  public updateServer(server: IServer): void {\n    if (!this.servers.has(server.identifier)) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${server.identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    this.servers.set(server.identifier, server);\n  }\n\n  /**\n   *\n   * @param identifier Unique identifier for the server to be removed.\n   * Removes a server instance from the manager.\n   * @returns void\n   */\n  public removeServer(identifier: string): void {\n    if (!this.servers.has(identifier)) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    const server = this.servers.get(identifier);\n    if (server) {\n      // Properly destroy the SocketManager to stop reconnection attempts\n      if (server.socketManager) {\n        server.socketManager.destroy();\n      }\n      \n      if (server.socket) {\n        server.socket.close();\n      }\n      \n      Object.values(server.intervals).forEach(clearInterval);\n    }\n\n    this.servers.delete(identifier);\n    this.logger.info(`[${identifier}] Server removed successfully.`);\n  }\n\n  /**\n   *\n   * @param identifier Unique identifier for the server to be fetched.\n   * Retrieves a server instance by its identifier.\n   * @returns IServer | null\n   */\n  public getServer(identifier: string): IServer | null {\n    return this.servers.get(identifier) || null;\n  }\n\n  /**\n   *\n   * @param identifier Unique identifier for the server to fetch information from.\n   * Fetches server information using the RCON command \"serverinfo\".\n   * @returns IRustServerInformation | string | undefined\n   */\n  public async fetchInfo(identifier: string) {\n    const server = this.getServer(identifier);\n    if (!server) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    const info = await this.sendCommand(identifier, \"serverinfo\");\n    if (!info) {\n      this.emit(RCEEvent.Error, {\n        error: `Failed to fetch server info for \"${identifier}\".`,\n      });\n      return;\n    }\n\n    let cleanOutput = info.replace(/\\\\n/g, \"\").trim();\n    try {\n      const json = JSON.parse(cleanOutput);\n      return json as IRustServerInformation;\n    } catch (error) {\n      return info;\n    }\n  }\n\n  /**\n   *\n   * @param identifier Unique identifier for the server to send the command to.\n   * @param command The command to be sent to the server.\n   * Sends a command to the server using the RCON connection.\n   * @returns Promise<string | undefined>\n   */\n  public async sendCommand(\n    identifier: string,\n    command: string\n  ): Promise<string | undefined> {\n    const server = this.getServer(identifier);\n    if (!server?.socket) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist or is not connected.`,\n      });\n      return;\n    }\n\n    if (!server.flags.includes(\"READY\")) return undefined;\n\n    if (server.socket.readyState === server.socket.OPEN) {\n      const rand = Math.floor(Math.random() * 999999999);\n\n      return new Promise(async (resolve, reject) => {\n        CommandManager.add({\n          identifier,\n          command,\n          uniqueId: rand,\n          resolve,\n          reject,\n        });\n\n        server.socket.send(\n          JSON.stringify({\n            message: command,\n            identifier: rand,\n          })\n        );\n\n        this.logger.debug(\n          `[${identifier}] Sending command: ${command} (ID: ${rand})`\n        );\n\n        const cmd = CommandManager.get(identifier, rand);\n        if (cmd) {\n          cmd.timeout = setTimeout(() => {\n            CommandManager.remove(cmd);\n            resolve(undefined);\n          }, 3_000);\n        }\n      });\n    } else {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" is not connected.`,\n      });\n      return;\n    }\n  }\n\n  /**\n   * Destroys the RCEManager instance, cleaning up all resources.\n   * Closes all server sockets, clears intervals, and removes all listeners.\n   */\n  public destroy(): void {\n    this.servers.forEach((server) => {\n      // Properly destroy the SocketManager to stop reconnection attempts\n      if (server.socketManager) {\n        server.socketManager.destroy();\n      }\n      \n      if (server.socket) {\n        server.socket.close();\n      }\n      Object.values(server.intervals).forEach(clearInterval);\n    });\n    this.servers.clear();\n    this.removeAllListeners();\n    this.logger.info(\"RCEManager destroyed successfully.\");\n  }\n\n  /*\n    Event Handling\n  */\n  emit<K extends keyof IEvent>(\n    event: K,\n    ...args: IEvent[K] extends undefined ? [] : [IEvent[K]]\n  ): boolean {\n    return super.emit(event, ...args);\n  }\n\n  on<K extends keyof IEvent>(\n    event: K,\n    listener: (payload: IEvent[K]) => void\n  ): this {\n    return super.on(event, listener);\n  }\n\n  once<K extends keyof IEvent>(\n    event: K,\n    listener: (payload: IEvent[K]) => void\n  ): this {\n    return super.once(event, listener);\n  }\n\n  off<K extends keyof IEvent>(\n    event: K,\n    listener: (payload: IEvent[K]) => void\n  ): this {\n    return super.off(event, listener);\n  }\n\n  /*\n    Scheduled Tasks\n  */\n  private async updateBroadcasters(identifier: string): Promise<void> {\n    const server = this.getServer(identifier);\n    if (!server) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    const broadcasters = await this.sendCommand(\n      identifier,\n      \"rf.listboardcaster\"\n    );\n    if (broadcasters) {\n      const broadcasts = [];\n      const regex =\n        /\\[(\\d+) MHz\\] Position: \\(([\\d.-]+), ([\\d.-]+), ([\\d.-]+)\\), Range: (\\d+)/g;\n      let match;\n\n      while ((match = regex.exec(broadcasters)) !== null) {\n        const frequency = parseInt(match[1], 10);\n        const coordinates = [\n          parseFloat(match[2]),\n          parseFloat(match[3]),\n          parseFloat(match[4]),\n        ];\n        const range = parseInt(match[5], 10);\n\n        broadcasts.push({ frequency, coordinates, range });\n      }\n\n      server.frequencies.forEach((freq) => {\n        if (!broadcasts.find((b) => parseInt(b.frequency) === freq)) {\n          this.emit(RCEEvent.FrequencyLost, {\n            server,\n            frequency: freq,\n          });\n\n          server.frequencies = server.frequencies.filter((f) => f !== freq);\n        }\n      });\n\n      broadcasts.forEach((broadcast) => {\n        if (server.frequencies.includes(broadcast.frequency)) return;\n        server.frequencies.push(broadcast.frequency);\n\n        if (broadcast.frequency === 4765) {\n          this.emit(RCEEvent.EventStart, {\n            server,\n            event: \"Small Oil Rig\",\n            special: false,\n          });\n        } else if (broadcast.frequency === 4768) {\n          this.emit(RCEEvent.EventStart, {\n            server,\n            event: \"Oil Rig\",\n            special: false,\n          });\n        }\n\n        this.emit(RCEEvent.FrequencyGained, {\n          server,\n          frequency: broadcast.frequency,\n          coordinates: broadcast.coordinates,\n          range: broadcast.range,\n        });\n      });\n\n      this.updateServer(server);\n    }\n  }\n\n  private async fetchGibs(identifier: string): Promise<void> {\n    const server = this.getServer(identifier);\n    if (!server) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    const bradley = await this.sendCommand(\n      identifier,\n      \"find_entity servergibs_bradley\"\n    );\n    const helicopter = await this.sendCommand(\n      identifier,\n      \"find_entity servergibs_patrolhelicopter\"\n    );\n\n    if (!bradley || !helicopter) {\n      this.emit(RCEEvent.Error, {\n        error: `Failed to fetch gibs for server \"${identifier}\".`,\n      });\n      return;\n    }\n\n    if (\n      bradley.includes(\"servergibs_bradley\") &&\n      !server.flags.includes(\"BRADLEY\")\n    ) {\n      server.flags.push(\"BRADLEY\");\n\n      setTimeout(() => {\n        const s = this.getServer(identifier);\n        if (s) {\n          s.flags = s.flags.filter((f) => f !== \"BRADLEY\");\n          this.updateServer(s);\n        }\n      }, 60_000 * 10);\n\n      this.emit(RCEEvent.EventStart, {\n        server,\n        event: \"Bradley APC Debris\",\n        special: false,\n      });\n    }\n\n    if (\n      helicopter.includes(\"servergibs_patrolhelicopter\") &&\n      !server.flags.includes(\"HELICOPTER\")\n    ) {\n      server.flags.push(\"HELICOPTER\");\n\n      setTimeout(() => {\n        const s = this.getServer(identifier);\n        if (s) {\n          s.flags = s.flags.filter((f) => f !== \"HELICOPTER\");\n          this.updateServer(s);\n        }\n      }, 60_000 * 10);\n\n      this.emit(RCEEvent.EventStart, {\n        server,\n        event: \"Patrol Helicopter Debris\",\n        special: false,\n      });\n    }\n\n    this.updateServer(server);\n  }\n\n  private async updatePlayers(identifier: string): Promise<void> {\n    const server = this.getServer(identifier);\n    if (!server) {\n      this.emit(RCEEvent.Error, {\n        error: `Server with identifier \"${identifier}\" does not exist.`,\n      });\n      return;\n    }\n\n    const players = await this.sendCommand(identifier, \"Users\");\n    if (players) {\n      const playerlist = players\n        .match(/\"(.*?)\"/g)\n        .map((ign) => ign.replace(/\"/g, \"\"));\n      playerlist.shift();\n\n      const comparePopulation = (oldList: string[], newList: string[]) => {\n        const joined = newList.filter((ign) => !oldList.includes(ign));\n        const left = oldList.filter((ign) => !newList.includes(ign));\n\n        return { joined, left };\n      };\n\n      const { joined, left } = comparePopulation(\n        server.connectedPlayers,\n        playerlist\n      );\n\n      joined.forEach((player) => {\n        this.emit(RCEEvent.PlayerJoined, {\n          server,\n          ign: player,\n        });\n      });\n\n      left.forEach((player) => {\n        this.emit(RCEEvent.PlayerLeft, {\n          server,\n          ign: player,\n        });\n      });\n\n      server.connectedPlayers = playerlist;\n      this.updateServer(server);\n\n      this.emit(RCEEvent.PlayerListUpdated, {\n        server,\n        players: playerlist,\n        joined,\n        left,\n      });\n    }\n  }\n}\n"]}