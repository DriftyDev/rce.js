{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA,2CAAkD;AAClD,mCAAsC;AAkItC,MAAa,SAAU,SAAQ,qBAAY;IACzC,IAAI,CACF,KAAQ,EACR,GAAG,IAAkE;QAErE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CACA,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CACF,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CACD,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AA5BD,8BA4BC","sourcesContent":["import { RCEEvent, QuickChat } from \"./constants\";\nimport { EventEmitter } from \"events\";\n\nexport interface AuthOptions {\n  servers?: ServerOptions[];\n  logLevel?: number;\n  refreshToken?: string;\n  file?: string;\n  authMethod?: \"file\" | \"manual\";\n}\n\nexport interface Auth {\n  access_token: string;\n  refresh_token: string;\n  token_type: \"Bearer\";\n  expires_in: number;\n}\n\nexport interface RustServer {\n  identifier: string;\n  serverId: number;\n  region: \"US\" | \"EU\";\n  refreshPlayers?: number;\n  players: string[];\n  added: boolean;\n}\n\nexport interface ServerOptions {\n  identifier: string;\n  serverId: number;\n  region: \"US\" | \"EU\";\n  refreshPlayers?: number;\n}\n\nexport interface WebsocketRequest {\n  identifier: string;\n  region: \"US\" | \"EU\";\n  sid: number;\n}\n\nexport interface WebsocketMessage {\n  type: \"connection_ack\" | \"data\" | \"error\" | \"ka\";\n  payload: any;\n  id: string;\n}\n\nexport interface KillPlayer {\n  id: string;\n  type: \"player\" | \"npc\" | \"entity\" | \"natural\";\n  name: string;\n}\n\nexport interface EventPayload {\n  server: RustServer;\n}\n\nexport interface MessageEventPayload extends EventPayload {\n  message: string;\n}\n\nexport interface PlayerListUpdateEventPayload extends EventPayload {\n  players: string[];\n}\n\nexport interface QuickChatEventPayload extends EventPayload {\n  type: \"local\" | \"server\";\n  ign: string;\n  message: QuickChat;\n}\n\nexport interface PlayerJoinedEventPayload extends EventPayload {\n  ign: string;\n  platform: \"XBL\" | \"PS\";\n}\n\nexport interface PlayerSuicideEventPayload extends EventPayload {\n  ign: string;\n}\n\nexport interface PlayerRespawnedEventPayload extends EventPayload {\n  ign: string;\n  platform: \"XBL\" | \"PS\";\n}\n\nexport interface PlayerRoleAddEventPayload extends EventPayload {\n  ign: string;\n  role: string;\n}\n\nexport interface NoteEditEventPayload extends EventPayload {\n  ign: string;\n  oldContent: string;\n  newContent: string;\n}\n\nexport interface EventStartEventPayload extends EventPayload {\n  event: string;\n}\n\nexport interface PlayerKillEventPayload extends EventPayload {\n  victim: KillPlayer;\n  killer: KillPlayer;\n}\n\nexport interface ItemSpawnEventPayload extends EventPayload {\n  ign: string;\n  item: string;\n  quantity: number;\n}\n\nexport interface VendingMachineNameEventPayload extends EventPayload {\n  ign: string;\n  oldName: string;\n  newName: string;\n}\n\nexport interface RCEEventTypes {\n  [RCEEvent.MESSAGE]: MessageEventPayload;\n  [RCEEvent.PLAYERLIST_UPDATE]: PlayerListUpdateEventPayload;\n  [RCEEvent.QUICK_CHAT]: QuickChatEventPayload;\n  [RCEEvent.PLAYER_JOINED]: PlayerJoinedEventPayload;\n  [RCEEvent.PLAYER_SUICIDE]: PlayerSuicideEventPayload;\n  [RCEEvent.PLAYER_RESPAWNED]: PlayerRespawnedEventPayload;\n  [RCEEvent.PLAYER_ROLE_ADD]: PlayerRoleAddEventPayload;\n  [RCEEvent.NOTE_EDIT]: NoteEditEventPayload;\n  [RCEEvent.EVENT_START]: EventStartEventPayload;\n  [RCEEvent.PLAYER_KILL]: PlayerKillEventPayload;\n  [RCEEvent.ITEM_SPAWN]: ItemSpawnEventPayload;\n  [RCEEvent.VENDING_MACHINE_NAME]: VendingMachineNameEventPayload;\n}\n\nexport class RCEEvents extends EventEmitter {\n  emit<K extends keyof RCEEventTypes>(\n    event: K,\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\n  ): boolean {\n    return super.emit(event, ...args);\n  }\n\n  on<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.on(event, listener);\n  }\n\n  once<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.once(event, listener);\n  }\n\n  off<K extends keyof RCEEventTypes>(\n    event: K,\n    listener: (arg: RCEEventTypes[K]) => void\n  ): this {\n    return super.off(event, listener);\n  }\n}\n"]}