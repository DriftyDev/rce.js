{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA,2CAA4D;AAC5D,mCAAsC;AAsDtC,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,mCAAiB,CAAA;IACjB,6BAAW,CAAA;IACX,mCAAiB,CAAA;IACjB,qCAAmB,CAAA;AACrB,CAAC,EALW,cAAc,8BAAd,cAAc,QAKzB;AA4KD,MAAa,SAAU,SAAQ,qBAAY;IACzC,IAAI,CACF,KAAQ,EACR,GAAG,IAAkE;QAErE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CACA,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CACF,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CACD,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AA5BD,8BA4BC","sourcesContent":["import { RCEEvent, QuickChat, LogLevel } from \"./constants\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport interface LoggerOptions {\r\n  logLevel?: number;\r\n  logFile?: string;\r\n}\r\n\r\nexport interface AuthOptions {\r\n  servers?: ServerOptions[];\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface Auth {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  token_type: \"Bearer\";\r\n  expires_in: number;\r\n}\r\n\r\nexport interface RustServer {\r\n  identifier: string;\r\n  serverId: number;\r\n  trueServerId?: number;\r\n  region: \"US\" | \"EU\";\r\n  refreshPlayers?: number;\r\n  refreshPlayersInterval?: NodeJS.Timeout;\r\n  state?: string | string[];\r\n  players: string[];\r\n  added: boolean;\r\n  ready: boolean;\r\n  serviceState: string;\r\n}\r\n\r\nexport interface ServerOptions {\r\n  identifier: string;\r\n  serverId: number;\r\n  region: \"US\" | \"EU\";\r\n  refreshPlayers?: number;\r\n  state?: string | string[];\r\n}\r\n\r\nexport interface WebsocketRequest {\r\n  identifier: string;\r\n  region: \"US\" | \"EU\";\r\n  sid: number;\r\n}\r\n\r\nexport interface WebsocketMessage {\r\n  type: \"connection_ack\" | \"data\" | \"error\" | \"ka\";\r\n  payload: any;\r\n  id: string;\r\n}\r\n\r\nexport enum KillPlayerType {\r\n  Player = \"player\",\r\n  Npc = \"npc\",\r\n  Entity = \"entity\",\r\n  Natural = \"natural\",\r\n}\r\n\r\nexport interface KillPlayer {\r\n  id: string;\r\n  type: KillPlayerType;\r\n  name: string;\r\n}\r\n\r\nexport interface EventPayload {\r\n  server: RustServer;\r\n}\r\n\r\nexport interface MessageEventPayload extends EventPayload {\r\n  message: string;\r\n}\r\n\r\nexport interface PlayerListUpdateEventPayload extends EventPayload {\r\n  players: string[];\r\n  joined: string[];\r\n  left: string[];\r\n}\r\n\r\nexport interface QuickChatEventPayload extends EventPayload {\r\n  type: \"local\" | \"server\" | \"team\";\r\n  ign: string;\r\n  message: QuickChat;\r\n}\r\n\r\nexport interface PlayerJoinedEventPayload extends EventPayload {\r\n  ign: string;\r\n}\r\n\r\nexport interface PlayerLeftEventPayload extends EventPayload {\r\n  ign: string;\r\n}\r\n\r\nexport interface PlayerSuicideEventPayload extends EventPayload {\r\n  ign: string;\r\n}\r\n\r\nexport interface PlayerRespawnedEventPayload extends EventPayload {\r\n  ign: string;\r\n  platform: \"XBL\" | \"PS\";\r\n}\r\n\r\nexport interface PlayerRoleAddEventPayload extends EventPayload {\r\n  ign: string;\r\n  role: string;\r\n}\r\n\r\nexport interface NoteEditEventPayload extends EventPayload {\r\n  ign: string;\r\n  oldContent: string;\r\n  newContent: string;\r\n}\r\n\r\nexport interface EventStartEventPayload extends EventPayload {\r\n  event: string;\r\n  special: boolean;\r\n}\r\n\r\nexport interface PlayerKillEventPayload extends EventPayload {\r\n  victim: KillPlayer;\r\n  killer: KillPlayer;\r\n}\r\n\r\nexport interface ItemSpawnEventPayload extends EventPayload {\r\n  ign: string;\r\n  item: string;\r\n  quantity: number;\r\n}\r\n\r\nexport interface VendingMachineNameEventPayload extends EventPayload {\r\n  ign: string;\r\n  oldName: string;\r\n  newName: string;\r\n}\r\n\r\nexport interface TeamCreateEventPayload extends EventPayload {\r\n  owner: string;\r\n  id: number;\r\n}\r\n\r\nexport interface TeamJoinEventPayload extends EventPayload {\r\n  ign: string;\r\n  owner: string;\r\n  id: number;\r\n}\r\n\r\nexport interface TeamLeaveEventPayload extends EventPayload {\r\n  ign: string;\r\n  owner: string;\r\n  id: number;\r\n}\r\n\r\nexport interface KitSpawnEventPayload extends EventPayload {\r\n  ign: string;\r\n  kit: string;\r\n}\r\n\r\nexport interface KitGiveEventPayload extends EventPayload {\r\n  admin: string;\r\n  ign: string;\r\n  kit: string;\r\n}\r\n\r\nexport interface SpecialEventStartEventPayload extends EventPayload {\r\n  event: \"Easter\" | \"Halloween\" | \"Xmas\" | \"HalloweenPortal\" | \"XmasPortal\";\r\n}\r\n\r\nexport interface SpecialEventEndEventPayload extends EventPayload {}\r\n\r\nexport interface ExecutingCommandEventPayload extends EventPayload {\r\n  command: string;\r\n}\r\n\r\nexport interface RCEErrorPayload extends EventPayload {\r\n  error: string;\r\n}\r\n\r\nexport interface ServiceStateEventPayload extends EventPayload {\r\n  state:\r\n    | \"STOPPING\"\r\n    | \"MAINTENANCE\"\r\n    | \"UPDATING\"\r\n    | \"STOPPED\"\r\n    | \"STARTING\"\r\n    | \"RUNNING\";\r\n}\r\n\r\nexport interface RCELogPayload {\r\n  level: LogLevel;\r\n  content: string;\r\n}\r\n\r\nexport interface CustomZoneAddedEventPayload extends EventPayload {\r\n  name: string;\r\n}\r\n\r\nexport interface CustomZoneRemovedEventPayload extends EventPayload {\r\n  name: string;\r\n}\r\n\r\nexport interface RCEEventTypes {\r\n  [RCEEvent.Message]: MessageEventPayload;\r\n  [RCEEvent.PlayerListUpdate]: PlayerListUpdateEventPayload;\r\n  [RCEEvent.QuickChat]: QuickChatEventPayload;\r\n  [RCEEvent.PlayerJoined]: PlayerJoinedEventPayload;\r\n  [RCEEvent.PlayerLeft]: PlayerLeftEventPayload;\r\n  [RCEEvent.PlayerSuicide]: PlayerSuicideEventPayload;\r\n  [RCEEvent.PlayerRespawned]: PlayerRespawnedEventPayload;\r\n  [RCEEvent.PlayerRoleAdd]: PlayerRoleAddEventPayload;\r\n  [RCEEvent.NoteEdit]: NoteEditEventPayload;\r\n  [RCEEvent.EventStart]: EventStartEventPayload;\r\n  [RCEEvent.PlayerKill]: PlayerKillEventPayload;\r\n  [RCEEvent.ItemSpawn]: ItemSpawnEventPayload;\r\n  [RCEEvent.VendingMachineName]: VendingMachineNameEventPayload;\r\n  [RCEEvent.KitSpawn]: KitSpawnEventPayload;\r\n  [RCEEvent.KitGive]: KitGiveEventPayload;\r\n  [RCEEvent.TeamCreate]: TeamCreateEventPayload;\r\n  [RCEEvent.TeamJoin]: TeamJoinEventPayload;\r\n  [RCEEvent.TeamLeave]: TeamLeaveEventPayload;\r\n  [RCEEvent.SpecialEventStart]: SpecialEventStartEventPayload;\r\n  [RCEEvent.SpecialEventEnd]: SpecialEventEndEventPayload;\r\n  [RCEEvent.ExecutingCommand]: ExecutingCommandEventPayload;\r\n  [RCEEvent.Error]: RCEErrorPayload;\r\n  [RCEEvent.Log]: RCELogPayload;\r\n  [RCEEvent.ServiceState]: ServiceStateEventPayload;\r\n  [RCEEvent.CustomZoneAdded]: CustomZoneAddedEventPayload;\r\n  [RCEEvent.CustomZoneRemoved]: CustomZoneRemovedEventPayload;\r\n}\r\n\r\nexport class RCEEvents extends EventEmitter {\r\n  emit<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\r\n  ): boolean {\r\n    return super.emit(event, ...args);\r\n  }\r\n\r\n  on<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.on(event, listener);\r\n  }\r\n\r\n  once<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.once(event, listener);\r\n  }\r\n\r\n  off<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.off(event, listener);\r\n  }\r\n}\r\n"]}