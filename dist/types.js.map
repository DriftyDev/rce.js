{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA,2CAAkD;AAClD,mCAAsC;AAkItC,MAAa,SAAU,SAAQ,qBAAY;IACzC,IAAI,CACF,KAAQ,EACR,GAAG,IAAkE;QAErE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CACA,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,IAAI,CACF,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CACD,KAAQ,EACR,QAAyC;QAEzC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACpC,CAAC;CACF;AA5BD,8BA4BC","sourcesContent":["import { RCEEvent, QuickChat } from \"./constants\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nexport interface AuthOptions {\r\n  servers?: ServerOptions[];\r\n  logLevel?: number;\r\n  refreshToken?: string;\r\n  file?: string;\r\n  authMethod?: \"file\" | \"manual\";\r\n}\r\n\r\nexport interface Auth {\r\n  access_token: string;\r\n  refresh_token: string;\r\n  token_type: \"Bearer\";\r\n  expires_in: number;\r\n}\r\n\r\nexport interface RustServer {\r\n  identifier: string;\r\n  serverId: number;\r\n  region: \"US\" | \"EU\";\r\n  refreshPlayers?: number;\r\n  players: string[];\r\n  added: boolean;\r\n}\r\n\r\nexport interface ServerOptions {\r\n  identifier: string;\r\n  serverId: number;\r\n  region: \"US\" | \"EU\";\r\n  refreshPlayers?: number;\r\n}\r\n\r\nexport interface WebsocketRequest {\r\n  identifier: string;\r\n  region: \"US\" | \"EU\";\r\n  sid: number;\r\n}\r\n\r\nexport interface WebsocketMessage {\r\n  type: \"connection_ack\" | \"data\" | \"error\" | \"ka\";\r\n  payload: any;\r\n  id: string;\r\n}\r\n\r\nexport interface KillPlayer {\r\n  id: string;\r\n  type: \"player\" | \"npc\" | \"entity\" | \"natural\";\r\n  name: string;\r\n}\r\n\r\nexport interface EventPayload {\r\n  server: RustServer;\r\n}\r\n\r\nexport interface MessageEventPayload extends EventPayload {\r\n  message: string;\r\n}\r\n\r\nexport interface PlayerListUpdateEventPayload extends EventPayload {\r\n  players: string[];\r\n}\r\n\r\nexport interface QuickChatEventPayload extends EventPayload {\r\n  type: \"local\" | \"server\";\r\n  ign: string;\r\n  message: QuickChat;\r\n}\r\n\r\nexport interface PlayerJoinedEventPayload extends EventPayload {\r\n  ign: string;\r\n  platform: \"XBL\" | \"PS\";\r\n}\r\n\r\nexport interface PlayerSuicideEventPayload extends EventPayload {\r\n  ign: string;\r\n}\r\n\r\nexport interface PlayerRespawnedEventPayload extends EventPayload {\r\n  ign: string;\r\n  platform: \"XBL\" | \"PS\";\r\n}\r\n\r\nexport interface PlayerRoleAddEventPayload extends EventPayload {\r\n  ign: string;\r\n  role: string;\r\n}\r\n\r\nexport interface NoteEditEventPayload extends EventPayload {\r\n  ign: string;\r\n  oldContent: string;\r\n  newContent: string;\r\n}\r\n\r\nexport interface EventStartEventPayload extends EventPayload {\r\n  event: string;\r\n}\r\n\r\nexport interface PlayerKillEventPayload extends EventPayload {\r\n  victim: KillPlayer;\r\n  killer: KillPlayer;\r\n}\r\n\r\nexport interface ItemSpawnEventPayload extends EventPayload {\r\n  ign: string;\r\n  item: string;\r\n  quantity: number;\r\n}\r\n\r\nexport interface VendingMachineNameEventPayload extends EventPayload {\r\n  ign: string;\r\n  oldName: string;\r\n  newName: string;\r\n}\r\n\r\nexport interface RCEEventTypes {\r\n  [RCEEvent.MESSAGE]: MessageEventPayload;\r\n  [RCEEvent.PLAYERLIST_UPDATE]: PlayerListUpdateEventPayload;\r\n  [RCEEvent.QUICK_CHAT]: QuickChatEventPayload;\r\n  [RCEEvent.PLAYER_JOINED]: PlayerJoinedEventPayload;\r\n  [RCEEvent.PLAYER_SUICIDE]: PlayerSuicideEventPayload;\r\n  [RCEEvent.PLAYER_RESPAWNED]: PlayerRespawnedEventPayload;\r\n  [RCEEvent.PLAYER_ROLE_ADD]: PlayerRoleAddEventPayload;\r\n  [RCEEvent.NOTE_EDIT]: NoteEditEventPayload;\r\n  [RCEEvent.EVENT_START]: EventStartEventPayload;\r\n  [RCEEvent.PLAYER_KILL]: PlayerKillEventPayload;\r\n  [RCEEvent.ITEM_SPAWN]: ItemSpawnEventPayload;\r\n  [RCEEvent.VENDING_MACHINE_NAME]: VendingMachineNameEventPayload;\r\n}\r\n\r\nexport class RCEEvents extends EventEmitter {\r\n  emit<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    ...args: RCEEventTypes[K] extends undefined ? [] : [RCEEventTypes[K]]\r\n  ): boolean {\r\n    return super.emit(event, ...args);\r\n  }\r\n\r\n  on<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.on(event, listener);\r\n  }\r\n\r\n  once<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.once(event, listener);\r\n  }\r\n\r\n  off<K extends keyof RCEEventTypes>(\r\n    event: K,\r\n    listener: (arg: RCEEventTypes[K]) => void\r\n  ): this {\r\n    return super.off(event, listener);\r\n  }\r\n}\r\n"]}