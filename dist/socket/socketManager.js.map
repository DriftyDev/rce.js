{"version":3,"file":"socketManager.js","sourceRoot":"","sources":["../../src/socket/socketManager.ts"],"names":[],"mappings":"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","sourcesContent":["import { IServerOptions } from \"../types\";\nimport { WebSocket } from \"ws\";\nimport type RCEManager from \"../manager\";\nimport { RCEEvent } from \"../types\";\nimport CommandManager from \"../commands/commandManager\";\nimport ResponseHandler from \"../commands/responseHandler\";\n\nexport default class SocketManager {\n  private _manager: RCEManager;\n  private _socket: WebSocket | null = null;\n  private connectionAttempts: number = 0;\n\n  public constructor(manager: RCEManager, options: IServerOptions) {\n    this._manager = manager;\n    this.connect(options);\n  }\n\n  public connect(opts: IServerOptions): void {\n    const { rcon } = opts;\n    const { host, port, password } = rcon;\n\n    const url = `ws://${host}:${port}/${password}`;\n    this._socket = new WebSocket(url);\n\n    this._socket.on(\"open\", () => {\n      const server = this._manager.getServer(opts.identifier);\n      if (server) {\n        server.socket = this._socket;\n        server.flags.push(\"READY\");\n        this._manager.updateServer(server);\n      }\n\n      this._manager.emit(RCEEvent.Ready, {\n        server: this._manager.getServer(opts.identifier),\n      });\n\n      this._manager.logger.debug(\n        `[${opts.identifier}] WebSocket connection established.`\n      );\n    });\n\n    this._socket.on(\"close\", (code: number, reason: string) => {\n      this._manager.logger.debug(\n        `[${opts.identifier}] WebSocket closed: ${code} - ${reason}`\n      );\n\n      this._socket.removeAllListeners();\n      this._socket.terminate();\n\n      const server = this._manager.getServer(opts.identifier);\n      if (server) {\n        server.flags = server.flags.filter((flag) => flag !== \"READY\");\n        this._manager.updateServer(server);\n      }\n\n      if (code !== 1000) {\n        if (this.connectionAttempts < 5) {\n          this._manager.logger.warn(\n            `[${opts.identifier}] Reconnecting WebSocket...`\n          );\n\n          setTimeout(() => {\n            this.connectionAttempts++;\n            this.connect(opts);\n          }, (this.connectionAttempts + 1) * 10_000);\n        } else {\n          this._manager.emit(RCEEvent.Error, {\n            error: `WebSocket connection failed for server \"${opts.identifier}\" after multiple attempts.`,\n            server: this._manager.getServer(opts.identifier) || undefined,\n          });\n\n          this._manager.removeServer(opts.identifier);\n        }\n      }\n    });\n\n    this._socket.on(\"error\", (error: Error) => {\n      this._manager.emit(RCEEvent.Error, {\n        error: `WebSocket error for server \"${opts.identifier}\": ${error.message}`,\n        server: this._manager.getServer(opts.identifier) || undefined,\n      });\n    });\n\n    this._socket.on(\"message\", (data: any) => {\n      const parsed = JSON.parse(data.toString());\n\n      if (parsed.Message) {\n        const uniqueId = parsed.Identifier;\n        const server = this._manager.getServer(opts.identifier);\n\n        this._manager.logger.debug(\n          `[${opts.identifier}] Received message: ${JSON.stringify(\n            parsed.Message\n          )}`\n        );\n\n        // Resolve the command if it exists\n        if (uniqueId > 0) {\n          const cmd = CommandManager.get(opts.identifier, Number(uniqueId));\n          if (cmd) {\n            if (cmd.timeout) {\n              clearTimeout(cmd.timeout);\n            }\n\n            cmd.resolve(parsed.Message);\n          }\n        }\n\n        // Send the command to regular expression handler\n        ResponseHandler.handle(this._manager, server, parsed.Message);\n      }\n    });\n  }\n\n  public getSocket(): WebSocket | null {\n    return this._socket;\n  }\n}\n"]}