<<<<<<< HEAD
{"version":3,"file":"Servers.js","sourceRoot":"","sources":["../../src/servers/Servers.ts"],"names":[],"mappings":"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","sourcesContent":["import type GPortalAuth from \"../auth/Auth\";\r\nimport type GPortalSocket from \"../socket/Socket\";\r\nimport type RCEManager from \"../Manager\";\r\nimport { GPortalRoutes, RCEEvent } from \"../constants\";\r\nimport type {\r\n  ServerOptions,\r\n  RustServer,\r\n  CommandResponse,\r\n  RustServerInformation,\r\n} from \"./interfaces\";\r\nimport ServerUtils from \"../util/ServerUtils\";\r\nimport CommandHandler from \"./CommandHandler\";\r\nimport Helper from \"../helper\";\r\n\r\nexport default class ServerManager {\r\n  private _manager: RCEManager;\r\n  private _auth: GPortalAuth;\r\n  private _socket: GPortalSocket;\r\n  private _servers: Map<string, RustServer> = new Map();\r\n\r\n  public constructor(\r\n    manager: RCEManager,\r\n    auth: GPortalAuth,\r\n    socket: GPortalSocket\r\n  ) {\r\n    this._manager = manager;\r\n    this._auth = auth;\r\n    this._socket = socket;\r\n  }\r\n\r\n  public async addMany(opts: ServerOptions[]) {\r\n    await Promise.all(opts.map((opt) => this.add(opt)));\r\n  }\r\n\r\n  public async add(opts: ServerOptions) {\r\n    this._manager.logger.debug(`Adding Server: ${opts.identifier}`);\r\n\r\n    if (!Array.isArray(opts.serverId) || !opts.serverId[1]) {\r\n      opts.serverId = [\r\n        Array.isArray(opts.serverId) ? opts.serverId[0] : opts.serverId,\r\n      ];\r\n\r\n      const sid = await this.fetchId(\r\n        opts.identifier,\r\n        opts.serverId[0],\r\n        opts.region\r\n      );\r\n\r\n      if (sid) {\r\n        opts.serverId.push(sid);\r\n      }\r\n    }\r\n\r\n    if (!opts.serverId[1]) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${opts.identifier}] Failed To Add Server: Invalid SID`\r\n      );\r\n      return;\r\n    }\r\n\r\n    const status = await this.fetchStatus(\r\n      opts.identifier,\r\n      opts.serverId[1],\r\n      opts.region\r\n    );\r\n    if (!status) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${opts.identifier}] Failed To Add Server: No Status Information`\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (status === \"SUSPENDED\") {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${opts.identifier}] Failed To Add Server: Suspended`\r\n      );\r\n      return;\r\n    }\r\n\r\n    this._servers.set(opts.identifier, {\r\n      identifier: opts.identifier,\r\n      serverId: opts.serverId,\r\n      region: opts.region,\r\n      intervals: {\r\n        playerRefreshing: {\r\n          enabled: opts.playerRefreshing ?? false,\r\n          interval: opts.playerRefreshing\r\n            ? setInterval(() => {\r\n                const s = this.get(opts.identifier);\r\n                if (s?.status === \"RUNNING\") {\r\n                  this.updatePlayers(opts.identifier);\r\n                }\r\n              }, 60_000)\r\n            : undefined,\r\n        },\r\n        radioRefreshing: {\r\n          enabled: opts.radioRefreshing ?? false,\r\n          interval: opts.radioRefreshing\r\n            ? setInterval(() => {\r\n                const s = this.get(opts.identifier);\r\n                if (s?.status === \"RUNNING\") {\r\n                  this.updateBroadcasters(opts.identifier);\r\n                }\r\n              }, 30_000)\r\n            : undefined,\r\n        },\r\n        extendedEventRefreshing: {\r\n          enabled: opts.extendedEventRefreshing ?? false,\r\n          interval: opts.extendedEventRefreshing\r\n            ? setInterval(() => {\r\n                const s = this.get(opts.identifier);\r\n                if (s?.status === \"RUNNING\") {\r\n                  this.fetchGibs(opts.identifier);\r\n                }\r\n              }, 60_000)\r\n            : undefined,\r\n        },\r\n      },\r\n      flags: [],\r\n      state: opts.state ?? [],\r\n      status: status as RustServer[\"status\"],\r\n      players: [],\r\n      frequencies: [],\r\n      intents: opts.intents,\r\n    });\r\n\r\n    const server = this._servers.get(opts.identifier);\r\n    this._socket.addServer(server);\r\n\r\n    this._manager.logger.debug(\r\n      `[${server.identifier}] Server Status: ${status}`\r\n    );\r\n\r\n    if (status === \"RUNNING\") {\r\n      await ServerUtils.setReady(this._manager, server, true);\r\n\r\n      if (opts.playerRefreshing) {\r\n        await this.updatePlayers(opts.identifier);\r\n      }\r\n\r\n      if (opts.radioRefreshing) {\r\n        await this.updateBroadcasters(opts.identifier);\r\n      }\r\n\r\n      if (opts.extendedEventRefreshing) {\r\n        await this.fetchGibs(opts.identifier);\r\n      }\r\n    }\r\n  }\r\n\r\n  public update(server: RustServer) {\r\n    this._manager.logger.debug(`[${server.identifier}] Updating Server`);\r\n\r\n    this._servers.set(server.identifier, server);\r\n  }\r\n\r\n  public removeAll() {\r\n    this._servers.forEach((server) => this.remove(server));\r\n  }\r\n\r\n  public removeMany(identifiers: string[]) {\r\n    identifiers.forEach((identifier) => {\r\n      const server = this.get(identifier);\r\n      if (server) {\r\n        this.remove(server);\r\n      }\r\n    });\r\n  }\r\n\r\n  public remove(server: RustServer) {\r\n    this._manager.logger.debug(`[${server.identifier}] Removing Server`);\r\n\r\n    clearInterval(server.intervals.playerRefreshing.interval);\r\n    clearInterval(server.intervals.radioRefreshing.interval);\r\n    clearInterval(server.intervals.extendedEventRefreshing.interval);\r\n    this._socket.removeServer(server);\r\n    this._servers.delete(server.identifier);\r\n\r\n    this._manager.logger.info(`[${server.identifier}] Server Removed`);\r\n  }\r\n\r\n  public get(identifier: string) {\r\n    return this._servers.get(identifier);\r\n  }\r\n\r\n  public getAll() {\r\n    return this._servers;\r\n  }\r\n\r\n  public async info(identifier: string, rawHostname: boolean = false) {\r\n    const server = this.get(identifier);\r\n    if (!server) {\r\n      ServerUtils.error(this._manager, `[${identifier}] Invalid Server`);\r\n      return null;\r\n    }\r\n\r\n    const info = await this.command(server.identifier, \"serverinfo\", true);\r\n    if (!info?.response) {\r\n      ServerUtils.error(this._manager, \"Failed To Fetch Server Info\", server);\r\n      return null;\r\n    }\r\n\r\n    const data: RustServerInformation = Helper.cleanOutput(\r\n      info.response,\r\n      true,\r\n      rawHostname\r\n    );\r\n    return data;\r\n  }\r\n\r\n  public async command(\r\n    identifier: string,\r\n    command: string,\r\n    response: boolean = false\r\n  ): Promise<CommandResponse> {\r\n    const token = this._auth?.accessToken;\r\n    if (!token) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${identifier}] Failed To Send Command: No Access Token`\r\n      );\r\n      return { ok: false, error: \"No Access Token\" };\r\n    }\r\n\r\n    const server = this._servers.get(identifier);\r\n    if (!server) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${identifier}] Failed To Send Command: Invalid Server`\r\n      );\r\n      return { ok: false, error: \"Invalid Server\" };\r\n    }\r\n\r\n    if (server.status !== \"RUNNING\") {\r\n      this._manager.logger.warn(\r\n        `[${identifier}] Failed To Send Command: Server Not Running`\r\n      );\r\n      return { ok: false, error: \"Server Not Running\" };\r\n    }\r\n\r\n    this._manager.logger.debug(`[${identifier}] Sending Command: ${command}`);\r\n\r\n    const payload = {\r\n      operationName: \"sendConsoleMessage\",\r\n      variables: {\r\n        sid: server.serverId[1],\r\n        region: server.region,\r\n        message: command,\r\n      },\r\n      query:\r\n        \"mutation sendConsoleMessage($sid: Int!, $region: REGION!, $message: String!) {\\n  sendConsoleMessage(rsid: {id: $sid, region: $region}, message: $message) {\\n    ok\\n    __typename\\n  }\\n}\",\r\n    };\r\n\r\n    if (response) {\r\n      return new Promise(async (resolve, reject) => {\r\n        CommandHandler.add({\r\n          identifier,\r\n          command,\r\n          resolve,\r\n          reject,\r\n        });\r\n\r\n        try {\r\n          const response = await fetch(GPortalRoutes.Api, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify(payload),\r\n          });\r\n\r\n          if (!response.ok) {\r\n            ServerUtils.error(\r\n              this._manager,\r\n              `Failed To Send Command: HTTP ${response.status} ${response.statusText}`,\r\n              server\r\n            );\r\n            CommandHandler.remove(CommandHandler.get(identifier, command));\r\n            resolve({\r\n              ok: false,\r\n              error: `HTTP ${response.status} ${response.statusText}`,\r\n            });\r\n          }\r\n\r\n          const data = await response.json();\r\n          if (!data?.data?.sendConsoleMessage?.ok) {\r\n            ServerUtils.error(\r\n              this._manager,\r\n              \"Failed To Send Command: AioRpcError\",\r\n              server\r\n            );\r\n            CommandHandler.remove(CommandHandler.get(identifier, command));\r\n            resolve({\r\n              ok: false,\r\n              error: \"AioRpcError\",\r\n            });\r\n          }\r\n\r\n          const cmd = CommandHandler.get(identifier, command);\r\n          if (cmd) {\r\n            cmd.timeout = setTimeout(() => {\r\n              CommandHandler.remove(CommandHandler.get(identifier, command));\r\n              resolve({\r\n                ok: true,\r\n                response: undefined,\r\n              });\r\n            }, 3_000);\r\n          }\r\n        } catch (error) {\r\n          CommandHandler.remove(CommandHandler.get(identifier, command));\r\n          resolve({\r\n            ok: false,\r\n            error: error.message,\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      try {\r\n        const response = await fetch(GPortalRoutes.Api, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify(payload),\r\n        });\r\n\r\n        if (!response.ok) {\r\n          ServerUtils.error(\r\n            this._manager,\r\n            `Failed To Send Command: HTTP ${response.status} ${response.statusText}`,\r\n            server\r\n          );\r\n          return {\r\n            ok: false,\r\n            error: `HTTP ${response.status} ${response.statusText}`,\r\n          };\r\n        }\r\n\r\n        return undefined;\r\n      } catch (error) {\r\n        ServerUtils.error(\r\n          this._manager,\r\n          `Failed To Send Command: ${error}`,\r\n          server\r\n        );\r\n        return {\r\n          ok: false,\r\n          error: error.message,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private async updateBroadcasters(identifier) {\r\n    const server = this.get(identifier);\r\n    if (!server) {\r\n      return this._manager.logger.warn(\r\n        `[${identifier}] Failed To Update Broadcasters: Invalid Server`\r\n      );\r\n    }\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Updating Broadcasters`);\r\n\r\n    const broadcasters = await this.command(\r\n      server.identifier,\r\n      \"rf.listboardcaster\",\r\n      true\r\n    );\r\n    if (!broadcasters?.response) {\r\n      return this._manager.logger.warn(\r\n        `[${server.identifier}] Failed To Update Broadcasters`\r\n      );\r\n    }\r\n\r\n    const broadcasts = [];\r\n\r\n    const regex =\r\n      /\\[(\\d+) MHz\\] Position: \\(([\\d.-]+), ([\\d.-]+), ([\\d.-]+)\\), Range: (\\d+)/g;\r\n    let match;\r\n\r\n    while ((match = regex.exec(broadcasters.response)) !== null) {\r\n      const frequency = parseInt(match[1], 10);\r\n      const coordinates = [\r\n        parseFloat(match[2]),\r\n        parseFloat(match[3]),\r\n        parseFloat(match[4]),\r\n      ];\r\n      const range = parseInt(match[5], 10);\r\n\r\n      broadcasts.push({ frequency, coordinates, range });\r\n    }\r\n\r\n    server.frequencies.forEach((freq) => {\r\n      if (!broadcasts.find((b) => parseInt(b.frequency) === freq)) {\r\n        this._manager.events.emit(RCEEvent.FrequencyLost, {\r\n          server,\r\n          frequency: freq,\r\n        });\r\n\r\n        server.frequencies = server.frequencies.filter((f) => f !== freq);\r\n      }\r\n    });\r\n\r\n    broadcasts.forEach((broadcast) => {\r\n      if (server.frequencies.includes(broadcast.frequency)) return;\r\n      server.frequencies.push(broadcast.frequency);\r\n\r\n      if (broadcast.frequency === 4765) {\r\n        this._manager.events.emit(RCEEvent.EventStart, {\r\n          server,\r\n          event: \"Small Oil Rig\",\r\n          special: false,\r\n        });\r\n      } else if (broadcast.frequency === 4768) {\r\n        this._manager.events.emit(RCEEvent.EventStart, {\r\n          server,\r\n          event: \"Oil Rig\",\r\n          special: false,\r\n        });\r\n      }\r\n\r\n      this._manager.events.emit(RCEEvent.FrequencyGained, {\r\n        server,\r\n        frequency: broadcast.frequency,\r\n        coordinates: broadcast.coordinates,\r\n        range: broadcast.range,\r\n      });\r\n    });\r\n\r\n    this.update(server);\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Broadcasters Updated`);\r\n  }\r\n\r\n  private async fetchGibs(identifier: string) {\r\n    const server = this.get(identifier);\r\n    if (!server) {\r\n      return this._manager.logger.warn(\r\n        `[${identifier}] Failed To Fetch Gibs: Invalid Server`\r\n      );\r\n    }\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Fetching Gibs`);\r\n\r\n    const bradley = await this.command(\r\n      server.identifier,\r\n      \"find_entity servergibs_bradley\",\r\n      true\r\n    );\r\n    const heli = await this.command(\r\n      server.identifier,\r\n      \"find_entity servergibs_patrolhelicopter\",\r\n      true\r\n    );\r\n\r\n    if (!bradley?.response || !heli?.response) {\r\n      return this._manager.logger.warn(\r\n        `[${server.identifier}] Failed To Fetch Gibs`\r\n      );\r\n    }\r\n\r\n    if (\r\n      bradley.response.includes(\"servergibs_bradley\") &&\r\n      !server.flags.includes(\"BRADLEY\")\r\n    ) {\r\n      server.flags.push(\"BRADLEY\");\r\n\r\n      setTimeout(() => {\r\n        const s = this.get(server.identifier);\r\n        if (s) {\r\n          s.flags = s.flags.filter((f) => f !== \"BRADLEY\");\r\n          this.update(s);\r\n        }\r\n      }, 60_000 * 10);\r\n\r\n      this._manager.events.emit(RCEEvent.EventStart, {\r\n        server,\r\n        event: \"Bradley APC Debris\",\r\n        special: false,\r\n      });\r\n    }\r\n\r\n    if (\r\n      heli.response.includes(\"servergibs_patrolhelicopter\") &&\r\n      !server.flags.includes(\"HELICOPTER\")\r\n    ) {\r\n      server.flags.push(\"HELICOPTER\");\r\n\r\n      setTimeout(() => {\r\n        const s = this.get(server.identifier);\r\n        if (s) {\r\n          s.flags = s.flags.filter((f) => f !== \"HELICOPTER\");\r\n          this.update(s);\r\n        }\r\n      }, 60_000 * 10);\r\n\r\n      this._manager.events.emit(RCEEvent.EventStart, {\r\n        server,\r\n        event: \"Patrol Helicopter Debris\",\r\n        special: false,\r\n      });\r\n    }\r\n\r\n    this.update(server);\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Gibs Fetched`);\r\n  }\r\n\r\n  private async updatePlayers(identifier: string) {\r\n    const server = this.get(identifier);\r\n    if (!server) {\r\n      return this._manager.logger.warn(\r\n        `[${identifier}] Failed To Update Players: Invalid Server`\r\n      );\r\n    }\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Updating Players`);\r\n\r\n    const players = await this.command(server.identifier, \"Users\", true);\r\n    if (!players?.response) {\r\n      return this._manager.logger.warn(\r\n        `[${server.identifier}] Failed To Update Players`\r\n      );\r\n    }\r\n\r\n    const playerlist = players.response\r\n      .match(/\"(.*?)\"/g)\r\n      .map((ign) => ign.replace(/\"/g, \"\"));\r\n    playerlist.shift();\r\n\r\n    const { joined, left } = Helper.comparePopulation(\r\n      server.players,\r\n      playerlist\r\n    );\r\n\r\n    joined.forEach((player) => {\r\n      this._manager.events.emit(RCEEvent.PlayerJoined, {\r\n        server,\r\n        ign: player,\r\n      });\r\n    });\r\n\r\n    left.forEach((player) => {\r\n      this._manager.events.emit(RCEEvent.PlayerLeft, {\r\n        server,\r\n        ign: player,\r\n      });\r\n    });\r\n\r\n    server.players = playerlist;\r\n    this.update(server);\r\n\r\n    this._manager.events.emit(RCEEvent.PlayerListUpdated, {\r\n      server,\r\n      players: playerlist,\r\n      joined,\r\n      left,\r\n    });\r\n\r\n    this._manager.logger.debug(`[${server.identifier}] Players Updated`);\r\n  }\r\n\r\n  private async fetchStatus(\r\n    identifier: string,\r\n    sid: number,\r\n    region: \"EU\" | \"US\"\r\n  ) {\r\n    const token = this._auth?.accessToken;\r\n    if (!token) {\r\n      console.error(\r\n        `[${identifier}] Failed To Fetch Server Status: No Access Token`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    this._manager.logger.debug(`[${identifier}] Fetching Server Status`);\r\n\r\n    try {\r\n      const response = await fetch(GPortalRoutes.Api, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          operationName: \"ctx\",\r\n          variables: {\r\n            sid,\r\n            region,\r\n          },\r\n          query:\r\n            \"query ctx($sid: Int!, $region: REGION!) {\\n  cfgContext(rsid: {id: $sid, region: $region}) {\\n    ns {\\n      ...CtxFields\\n      __typename\\n    }\\n    errors {\\n      mutator\\n      affectedPaths\\n      error {\\n        class_\\n        args\\n        __typename\\n      }\\n      scope\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment GameServerFields on GameServer {\\n  id\\n  serverName\\n  serverPort\\n  serverIp\\n  __typename\\n}\\n\\nfragment PermissionFields on Permission {\\n  userName\\n  created\\n  __typename\\n}\\n\\nfragment MysqlDbFields on CustomerMysqlDb {\\n  httpUrl\\n  host\\n  port\\n  database\\n  username\\n  password\\n  __typename\\n}\\n\\nfragment ServiceStateFields on ServiceState {\\n  state\\n  fsmState\\n  fsmIsTransitioning\\n  fsmIsExclusiveLocked\\n  fsmFileAccess\\n  fsmLastStateChange\\n  fsmStateLiveProgress {\\n    ... on InstallProgress {\\n      action\\n      percentage\\n      __typename\\n    }\\n    ... on BroadcastProgress {\\n      nextMessageAt\\n      stateExitAt\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment RestartTaskFields on RestartTask {\\n  id\\n  runOnWeekday\\n  runOnDayofmonth\\n  runAtTimeofday\\n  runInTimezone\\n  schedule\\n  data {\\n    description\\n    args\\n    scheduleExtended\\n    nextFireTime\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment DisplayPortFields on DisplayPorts {\\n  rconPort\\n  queryPort\\n  __typename\\n}\\n\\nfragment SteamWorkshopItemFields on SteamWorkshopItem {\\n  id\\n  appId\\n  itemType\\n  name\\n  links {\\n    websiteUrl\\n    __typename\\n  }\\n  summary\\n  logo {\\n    url\\n    __typename\\n  }\\n  maps {\\n    workshopId\\n    mapName\\n    __typename\\n  }\\n  dateCreated\\n  dateModified\\n  __typename\\n}\\n\\nfragment SevenDaysModFields on SevenDaysMod {\\n  id\\n  name\\n  repoKey\\n  active\\n  created\\n  modified\\n  __typename\\n}\\n\\nfragment MapParams on FarmingSimulatorMapParamsObject {\\n  serverIp\\n  webServerPort\\n  webStatsCode\\n  token\\n  __typename\\n}\\n\\nfragment CtxFields on RootNamespace {\\n  sys {\\n    game {\\n      name\\n      key\\n      platform\\n      forumBoardId\\n      supportedPlatforms\\n      __typename\\n    }\\n    extraGameTranslationKeys\\n    gameServer {\\n      ...GameServerFields\\n      __typename\\n    }\\n    permissionsOwner {\\n      ...PermissionFields\\n      __typename\\n    }\\n    permissions {\\n      ...PermissionFields\\n      __typename\\n    }\\n    mysqlDb {\\n      ...MysqlDbFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  service {\\n    config {\\n      rsid {\\n        id\\n        region\\n        __typename\\n      }\\n      type\\n      hwId\\n      state\\n      ftpUser\\n      ftpPort\\n      ftpPassword\\n      ftpReadOnly\\n      ipAddress\\n      rconPort\\n      queryPort\\n      autoBackup\\n      dnsNames\\n      currentVersion\\n      targetVersion\\n      __typename\\n    }\\n    latestRev {\\n      id\\n      created\\n      __typename\\n    }\\n    maxSlots\\n    files\\n    memory {\\n      base\\n      effective\\n      __typename\\n    }\\n    currentState {\\n      ...ServiceStateFields\\n      __typename\\n    }\\n    backups {\\n      id\\n      userSize\\n      created\\n      isAutoBackup\\n      __typename\\n    }\\n    restartSchedule {\\n      ...RestartTaskFields\\n      __typename\\n    }\\n    dnsAvailableTlds\\n    __typename\\n  }\\n  admin {\\n    hardwareGuacamoleConnection {\\n      url\\n      __typename\\n    }\\n    __typename\\n  }\\n  profile {\\n    __typename\\n    ... on ProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on MinecraftProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        additionalPorts\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      worlds\\n      addonRam\\n      isRamServer\\n      ramOrderCreationDate\\n      ramStopTimeUtc\\n      isConnectedToBungeecord\\n      bungeecordServerUrl\\n      executables {\\n        id\\n        name\\n        key\\n        default\\n        __typename\\n      }\\n      mods {\\n        id\\n        repoKey\\n        name\\n        image\\n        mindRam\\n        projectUrl\\n        revisions {\\n          id\\n          created\\n          executableId\\n          extraData\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on CsgoProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        gotvPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      selectedWorkshopItems {\\n        ...SteamWorkshopItemFields\\n        __typename\\n      }\\n      installedMaps {\\n        name\\n        displayName\\n        workshopItem {\\n          ...SteamWorkshopItemFields\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on ValheimProfileNamespace {\\n      name\\n      cfgFiles\\n      clientLink\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on HellLetLooseProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        statsPort\\n        beaconPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on SevenDaysToDieProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        telnetPort\\n        webDashboardPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      availableMods {\\n        ...SevenDaysModFields\\n        __typename\\n      }\\n      isModUpdateAvailable\\n      __typename\\n    }\\n    ... on SoulmaskProfileNamespace {\\n      name\\n      cfgFiles\\n      gameUid\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on VRisingProfileNamespace {\\n      name\\n      cfgFiles\\n      isLaunchServer\\n      isOfficialServer\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on RustConsoleProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      modifyActionHints\\n      __typename\\n    }\\n    ... on FarmingSimulatorProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      wiLink\\n      defaultModSpace\\n      masterWiLink\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        webPort\\n        __typename\\n      }\\n      mapParams {\\n        ...MapParams\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on BungeecordProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      gpServers\\n      accessibleMinecraftServers {\\n        ...GameServerFields\\n        __typename\\n      }\\n      __typename\\n    }\\n  }\\n  __typename\\n}\",\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        ServerUtils.error(\r\n          this._manager,\r\n          `[${identifier}] Failed To Fetch Server Status: ${response.status} ${response.statusText}`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data?.data?.cfgContext?.ns?.service?.currentState\r\n        ?.state as RustServer[\"status\"];\r\n    } catch (error) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${identifier}] Failed To Fetch Server Status: ${error.message}`\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private async fetchId(identifier: string, sid: number, region: \"EU\" | \"US\") {\r\n    const token = this._auth?.accessToken;\r\n    if (!token) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${identifier}] Failed To Fetch Server ID: No Access Token`\r\n      );\r\n      return null;\r\n    }\r\n\r\n    this._manager.logger.debug(`[${identifier}] Fetching Server ID`);\r\n\r\n    try {\r\n      const response = await fetch(GPortalRoutes.Api, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          operationName: \"sid\",\r\n          variables: {\r\n            gameserverId: sid,\r\n            region,\r\n          },\r\n          query:\r\n            \"query sid($gameserverId: Int!, $region: REGION!) {\\n  sid(gameserverId: $gameserverId, region: $region)\\n}\",\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        ServerUtils.error(\r\n          this._manager,\r\n          `[${identifier}] Failed To Fetch Server ID: ${response.status} ${response.statusText}`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const data = await response.json();\r\n      if (data?.errors?.length) {\r\n        this._manager.logger.warn(\r\n          `[${identifier}] Failed To Fetch Server ID: ${data.errors[0].message}`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      const serverId = data?.data?.sid as number;\r\n      if (!serverId) {\r\n        ServerUtils.error(\r\n          this._manager,\r\n          `[${identifier}] Failed To Fetch Server ID: Invalid SID`\r\n        );\r\n        return null;\r\n      }\r\n\r\n      return serverId;\r\n    } catch (error) {\r\n      ServerUtils.error(\r\n        this._manager,\r\n        `[${identifier}] Failed To Fetch Server ID: ${error.message}`\r\n      );\r\n      return null;\r\n    }\r\n  }\r\n}\r\n"]}
=======
{"version":3,"file":"Servers.js","sourceRoot":"","sources":["../../src/servers/Servers.ts"],"names":[],"mappings":"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","sourcesContent":["import type GPortalAuth from \"../auth/Auth\";\nimport type GPortalSocket from \"../socket/Socket\";\nimport type RCEManager from \"../Manager\";\nimport { GPortalRoutes, RCEEvent } from \"../constants\";\nimport type {\n  ServerOptions,\n  RustServer,\n  CommandResponse,\n  RustServerInformation,\n} from \"./interfaces\";\nimport ServerUtils from \"../util/ServerUtils\";\nimport CommandHandler from \"./CommandHandler\";\nimport Helper from \"../helper\";\n\nexport default class ServerManager {\n  private _manager: RCEManager;\n  private _auth: GPortalAuth;\n  private _socket: GPortalSocket;\n  private _servers: Map<string, RustServer> = new Map();\n\n  public constructor(\n    manager: RCEManager,\n    auth: GPortalAuth,\n    socket: GPortalSocket\n  ) {\n    this._manager = manager;\n    this._auth = auth;\n    this._socket = socket;\n  }\n\n  public async addMany(opts: ServerOptions[]) {\n    await Promise.all(opts.map((opt) => this.add(opt)));\n  }\n\n  public async add(opts: ServerOptions) {\n    this._manager.logger.debug(`Adding Server: ${opts.identifier}`);\n\n    if (!Array.isArray(opts.serverId) || !opts.serverId[1]) {\n      opts.serverId = [\n        Array.isArray(opts.serverId) ? opts.serverId[0] : opts.serverId,\n      ];\n\n      const sid = await this.fetchId(\n        opts.identifier,\n        opts.serverId[0],\n        opts.region\n      );\n\n      if (sid) {\n        opts.serverId.push(sid);\n      }\n    }\n\n    if (!opts.serverId[1]) {\n      ServerUtils.error(\n        this._manager,\n        `[${opts.identifier}] Failed To Add Server: Invalid SID`\n      );\n      return;\n    }\n\n    const status = await this.fetchStatus(\n      opts.identifier,\n      opts.serverId[1],\n      opts.region\n    );\n    if (!status) {\n      ServerUtils.error(\n        this._manager,\n        `[${opts.identifier}] Failed To Add Server: No Status Information`\n      );\n      return;\n    }\n\n    if (status === \"SUSPENDED\") {\n      ServerUtils.error(\n        this._manager,\n        `[${opts.identifier}] Failed To Add Server: Suspended`\n      );\n      return;\n    }\n\n    this._servers.set(opts.identifier, {\n      identifier: opts.identifier,\n      serverId: opts.serverId,\n      region: opts.region,\n      intervals: {\n        playerRefreshing: {\n          enabled: opts.playerRefreshing ?? false,\n          interval: opts.playerRefreshing\n            ? setInterval(() => {\n                const s = this.get(opts.identifier);\n                if (s?.status === \"RUNNING\") {\n                  this.updatePlayers(opts.identifier);\n                }\n              }, 60_000)\n            : undefined,\n        },\n        radioRefreshing: {\n          enabled: opts.radioRefreshing ?? false,\n          interval: opts.radioRefreshing\n            ? setInterval(() => {\n                const s = this.get(opts.identifier);\n                if (s?.status === \"RUNNING\") {\n                  this.updateBroadcasters(opts.identifier);\n                }\n              }, 30_000)\n            : undefined,\n        },\n        extendedEventRefreshing: {\n          enabled: opts.extendedEventRefreshing ?? false,\n          interval: opts.extendedEventRefreshing\n            ? setInterval(() => {\n                const s = this.get(opts.identifier);\n                if (s?.status === \"RUNNING\") {\n                  this.fetchGibs(opts.identifier);\n                }\n              }, 60_000)\n            : undefined,\n        },\n      },\n      flags: [],\n      state: opts.state ?? [],\n      status: status as RustServer[\"status\"],\n      players: [],\n      frequencies: [],\n      intents: opts.intents,\n    });\n\n    const server = this._servers.get(opts.identifier);\n    this._socket.addServer(server);\n\n    this._manager.logger.debug(\n      `[${server.identifier}] Server Status: ${status}`\n    );\n\n    if (status === \"RUNNING\") {\n      await ServerUtils.setReady(this._manager, server, true);\n\n      if (opts.playerRefreshing) {\n        await this.updatePlayers(opts.identifier);\n      }\n\n      if (opts.radioRefreshing) {\n        await this.updateBroadcasters(opts.identifier);\n      }\n\n      if (opts.extendedEventRefreshing) {\n        await this.fetchGibs(opts.identifier);\n      }\n    }\n  }\n\n  public update(server: RustServer) {\n    this._manager.logger.debug(`[${server.identifier}] Updating Server`);\n\n    this._servers.set(server.identifier, server);\n  }\n\n  public removeAll() {\n    this._servers.forEach((server) => this.remove(server));\n  }\n\n  public removeMany(identifiers: string[]) {\n    identifiers.forEach((identifier) => {\n      const server = this.get(identifier);\n      if (server) {\n        this.remove(server);\n      }\n    });\n  }\n\n  public remove(server: RustServer) {\n    this._manager.logger.debug(`[${server.identifier}] Removing Server`);\n\n    clearInterval(server.intervals.playerRefreshing.interval);\n    clearInterval(server.intervals.radioRefreshing.interval);\n    clearInterval(server.intervals.extendedEventRefreshing.interval);\n    this._socket.removeServer(server);\n    this._servers.delete(server.identifier);\n\n    this._manager.logger.info(`[${server.identifier}] Server Removed`);\n  }\n\n  public get(identifier: string) {\n    return this._servers.get(identifier);\n  }\n\n  public getAll() {\n    return this._servers;\n  }\n\n  public async info(identifier: string) {\n    const server = this.get(identifier);\n    if (!server) {\n      ServerUtils.error(this._manager, `[${identifier}] Invalid Server`);\n      return null;\n    }\n\n    const info = await this.command(server.identifier, \"serverinfo\", true);\n    if (!info?.response) {\n      ServerUtils.error(this._manager, \"Failed To Fetch Server Info\", server);\n      return null;\n    }\n\n    const data: RustServerInformation = Helper.cleanOutput(info.response, true);\n    return data;\n  }\n\n  public async command(\n    identifier: string,\n    command: string,\n    response: boolean = false\n  ): Promise<CommandResponse> {\n    const token = this._auth?.accessToken;\n    if (!token) {\n      ServerUtils.error(\n        this._manager,\n        `[${identifier}] Failed To Send Command: No Access Token`\n      );\n      return { ok: false, error: \"No Access Token\" };\n    }\n\n    const server = this._servers.get(identifier);\n    if (!server) {\n      ServerUtils.error(\n        this._manager,\n        `[${identifier}] Failed To Send Command: Invalid Server`\n      );\n      return { ok: false, error: \"Invalid Server\" };\n    }\n\n    if (server.status !== \"RUNNING\") {\n      this._manager.logger.warn(\n        `[${identifier}] Failed To Send Command: Server Not Running`\n      );\n      return { ok: false, error: \"Server Not Running\" };\n    }\n\n    this._manager.logger.debug(`[${identifier}] Sending Command: ${command}`);\n\n    const payload = {\n      operationName: \"sendConsoleMessage\",\n      variables: {\n        sid: server.serverId[1],\n        region: server.region,\n        message: command,\n      },\n      query:\n        \"mutation sendConsoleMessage($sid: Int!, $region: REGION!, $message: String!) {\\n  sendConsoleMessage(rsid: {id: $sid, region: $region}, message: $message) {\\n    ok\\n    __typename\\n  }\\n}\",\n    };\n\n    if (response) {\n      return new Promise(async (resolve, reject) => {\n        CommandHandler.add({\n          identifier,\n          command,\n          resolve,\n          reject,\n        });\n\n        try {\n          const response = await fetch(GPortalRoutes.Api, {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${token}`,\n            },\n            body: JSON.stringify(payload),\n          });\n\n          if (!response.ok) {\n            ServerUtils.error(\n              this._manager,\n              `Failed To Send Command: HTTP ${response.status} ${response.statusText}`,\n              server\n            );\n            CommandHandler.remove(CommandHandler.get(identifier, command));\n            resolve({\n              ok: false,\n              error: `HTTP ${response.status} ${response.statusText}`,\n            });\n          }\n\n          const data = await response.json();\n          if (!data?.data?.sendConsoleMessage?.ok) {\n            ServerUtils.error(\n              this._manager,\n              \"Failed To Send Command: AioRpcError\",\n              server\n            );\n            CommandHandler.remove(CommandHandler.get(identifier, command));\n            resolve({\n              ok: false,\n              error: \"AioRpcError\",\n            });\n          }\n\n          const cmd = CommandHandler.get(identifier, command);\n          if (cmd) {\n            cmd.timeout = setTimeout(() => {\n              CommandHandler.remove(CommandHandler.get(identifier, command));\n              resolve({\n                ok: true,\n                response: undefined,\n              });\n            }, 3_000);\n          }\n        } catch (error) {\n          CommandHandler.remove(CommandHandler.get(identifier, command));\n          resolve({\n            ok: false,\n            error: error.message,\n          });\n        }\n      });\n    } else {\n      try {\n        const response = await fetch(GPortalRoutes.Api, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${token}`,\n          },\n          body: JSON.stringify(payload),\n        });\n\n        if (!response.ok) {\n          ServerUtils.error(\n            this._manager,\n            `Failed To Send Command: HTTP ${response.status} ${response.statusText}`,\n            server\n          );\n          return {\n            ok: false,\n            error: `HTTP ${response.status} ${response.statusText}`,\n          };\n        }\n\n        return undefined;\n      } catch (error) {\n        ServerUtils.error(\n          this._manager,\n          `Failed To Send Command: ${error}`,\n          server\n        );\n        return {\n          ok: false,\n          error: error.message,\n        };\n      }\n    }\n  }\n\n  private async updateBroadcasters(identifier) {\n    const server = this.get(identifier);\n    if (!server) {\n      return this._manager.logger.warn(\n        `[${identifier}] Failed To Update Broadcasters: Invalid Server`\n      );\n    }\n\n    this._manager.logger.debug(`[${server.identifier}] Updating Broadcasters`);\n\n    const broadcasters = await this.command(\n      server.identifier,\n      \"rf.listboardcaster\",\n      true\n    );\n    if (!broadcasters?.response) {\n      return this._manager.logger.warn(\n        `[${server.identifier}] Failed To Update Broadcasters`\n      );\n    }\n\n    const broadcasts = [];\n\n    const regex =\n      /\\[(\\d+) MHz\\] Position: \\(([\\d.-]+), ([\\d.-]+), ([\\d.-]+)\\), Range: (\\d+)/g;\n    let match;\n\n    while ((match = regex.exec(broadcasters.response)) !== null) {\n      const frequency = parseInt(match[1], 10);\n      const coordinates = [\n        parseFloat(match[2]),\n        parseFloat(match[3]),\n        parseFloat(match[4]),\n      ];\n      const range = parseInt(match[5], 10);\n\n      broadcasts.push({ frequency, coordinates, range });\n    }\n\n    server.frequencies.forEach((freq) => {\n      if (!broadcasts.find((b) => parseInt(b.frequency) === freq)) {\n        this._manager.events.emit(RCEEvent.FrequencyLost, {\n          server,\n          frequency: freq,\n        });\n\n        server.frequencies = server.frequencies.filter((f) => f !== freq);\n      }\n    });\n\n    broadcasts.forEach((broadcast) => {\n      if (server.frequencies.includes(broadcast.frequency)) return;\n      server.frequencies.push(broadcast.frequency);\n\n      if (broadcast.frequency === 4765) {\n        this._manager.events.emit(RCEEvent.EventStart, {\n          server,\n          event: \"Small Oil Rig\",\n          special: false,\n        });\n      } else if (broadcast.frequency === 4768) {\n        this._manager.events.emit(RCEEvent.EventStart, {\n          server,\n          event: \"Oil Rig\",\n          special: false,\n        });\n      }\n\n      this._manager.events.emit(RCEEvent.FrequencyGained, {\n        server,\n        frequency: broadcast.frequency,\n        coordinates: broadcast.coordinates,\n        range: broadcast.range,\n      });\n    });\n\n    this.update(server);\n\n    this._manager.logger.debug(`[${server.identifier}] Broadcasters Updated`);\n  }\n\n  private async fetchGibs(identifier: string) {\n    const server = this.get(identifier);\n    if (!server) {\n      return this._manager.logger.warn(\n        `[${identifier}] Failed To Fetch Gibs: Invalid Server`\n      );\n    }\n\n    this._manager.logger.debug(`[${server.identifier}] Fetching Gibs`);\n\n    const bradley = await this.command(\n      server.identifier,\n      \"find_entity servergibs_bradley\",\n      true\n    );\n    const heli = await this.command(\n      server.identifier,\n      \"find_entity servergibs_patrolhelicopter\",\n      true\n    );\n\n    if (!bradley?.response || !heli?.response) {\n      return this._manager.logger.warn(\n        `[${server.identifier}] Failed To Fetch Gibs`\n      );\n    }\n\n    if (\n      bradley.response.includes(\"servergibs_bradley\") &&\n      !server.flags.includes(\"BRADLEY\")\n    ) {\n      server.flags.push(\"BRADLEY\");\n\n      setTimeout(() => {\n        const s = this.get(server.identifier);\n        if (s) {\n          s.flags = s.flags.filter((f) => f !== \"BRADLEY\");\n          this.update(s);\n        }\n      }, 60_000 * 6);\n\n      this._manager.events.emit(RCEEvent.EventStart, {\n        server,\n        event: \"Bradley APC Debris\",\n        special: false,\n      });\n    }\n\n    if (\n      heli.response.includes(\"servergibs_patrolhelicopter\") &&\n      !server.flags.includes(\"HELICOPTER\")\n    ) {\n      server.flags.push(\"HELICOPTER\");\n\n      setTimeout(() => {\n        const s = this.get(server.identifier);\n        if (s) {\n          s.flags = s.flags.filter((f) => f !== \"HELICOPTER\");\n          this.update(s);\n        }\n      }, 60_000 * 6);\n\n      this._manager.events.emit(RCEEvent.EventStart, {\n        server,\n        event: \"Patrol Helicopter Debris\",\n        special: false,\n      });\n    }\n\n    this.update(server);\n\n    this._manager.logger.debug(`[${server.identifier}] Gibs Fetched`);\n  }\n\n  private async updatePlayers(identifier: string) {\n    const server = this.get(identifier);\n    if (!server) {\n      return this._manager.logger.warn(\n        `[${identifier}] Failed To Update Players: Invalid Server`\n      );\n    }\n\n    this._manager.logger.debug(`[${server.identifier}] Updating Players`);\n\n    const players = await this.command(server.identifier, \"Users\", true);\n    if (!players?.response) {\n      return this._manager.logger.warn(\n        `[${server.identifier}] Failed To Update Players`\n      );\n    }\n\n    const playerlist = players.response\n      .match(/\"(.*?)\"/g)\n      .map((ign) => ign.replace(/\"/g, \"\"));\n    playerlist.shift();\n\n    const { joined, left } = Helper.comparePopulation(\n      server.players,\n      playerlist\n    );\n\n    joined.forEach((player) => {\n      this._manager.events.emit(RCEEvent.PlayerJoined, {\n        server,\n        ign: player,\n      });\n    });\n\n    left.forEach((player) => {\n      this._manager.events.emit(RCEEvent.PlayerLeft, {\n        server,\n        ign: player,\n      });\n    });\n\n    server.players = playerlist;\n    this.update(server);\n\n    this._manager.events.emit(RCEEvent.PlayerListUpdated, {\n      server,\n      players: playerlist,\n      joined,\n      left,\n    });\n\n    this._manager.logger.debug(`[${server.identifier}] Players Updated`);\n  }\n\n  private async fetchStatus(\n    identifier: string,\n    sid: number,\n    region: \"EU\" | \"US\"\n  ) {\n    const token = this._auth?.accessToken;\n    if (!token) {\n      console.error(\n        `[${identifier}] Failed To Fetch Server Status: No Access Token`\n      );\n      return null;\n    }\n\n    this._manager.logger.debug(`[${identifier}] Fetching Server Status`);\n\n    try {\n      const response = await fetch(GPortalRoutes.Api, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          operationName: \"ctx\",\n          variables: {\n            sid,\n            region,\n          },\n          query:\n            \"query ctx($sid: Int!, $region: REGION!) {\\n  cfgContext(rsid: {id: $sid, region: $region}) {\\n    ns {\\n      ...CtxFields\\n      __typename\\n    }\\n    errors {\\n      mutator\\n      affectedPaths\\n      error {\\n        class_\\n        args\\n        __typename\\n      }\\n      scope\\n      __typename\\n    }\\n    __typename\\n  }\\n}\\n\\nfragment GameServerFields on GameServer {\\n  id\\n  serverName\\n  serverPort\\n  serverIp\\n  __typename\\n}\\n\\nfragment PermissionFields on Permission {\\n  userName\\n  created\\n  __typename\\n}\\n\\nfragment MysqlDbFields on CustomerMysqlDb {\\n  httpUrl\\n  host\\n  port\\n  database\\n  username\\n  password\\n  __typename\\n}\\n\\nfragment ServiceStateFields on ServiceState {\\n  state\\n  fsmState\\n  fsmIsTransitioning\\n  fsmIsExclusiveLocked\\n  fsmFileAccess\\n  fsmLastStateChange\\n  fsmStateLiveProgress {\\n    ... on InstallProgress {\\n      action\\n      percentage\\n      __typename\\n    }\\n    ... on BroadcastProgress {\\n      nextMessageAt\\n      stateExitAt\\n      __typename\\n    }\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment RestartTaskFields on RestartTask {\\n  id\\n  runOnWeekday\\n  runOnDayofmonth\\n  runAtTimeofday\\n  runInTimezone\\n  schedule\\n  data {\\n    description\\n    args\\n    scheduleExtended\\n    nextFireTime\\n    __typename\\n  }\\n  __typename\\n}\\n\\nfragment DisplayPortFields on DisplayPorts {\\n  rconPort\\n  queryPort\\n  __typename\\n}\\n\\nfragment SteamWorkshopItemFields on SteamWorkshopItem {\\n  id\\n  appId\\n  itemType\\n  name\\n  links {\\n    websiteUrl\\n    __typename\\n  }\\n  summary\\n  logo {\\n    url\\n    __typename\\n  }\\n  maps {\\n    workshopId\\n    mapName\\n    __typename\\n  }\\n  dateCreated\\n  dateModified\\n  __typename\\n}\\n\\nfragment SevenDaysModFields on SevenDaysMod {\\n  id\\n  name\\n  repoKey\\n  active\\n  created\\n  modified\\n  __typename\\n}\\n\\nfragment MapParams on FarmingSimulatorMapParamsObject {\\n  serverIp\\n  webServerPort\\n  webStatsCode\\n  token\\n  __typename\\n}\\n\\nfragment CtxFields on RootNamespace {\\n  sys {\\n    game {\\n      name\\n      key\\n      platform\\n      forumBoardId\\n      supportedPlatforms\\n      __typename\\n    }\\n    extraGameTranslationKeys\\n    gameServer {\\n      ...GameServerFields\\n      __typename\\n    }\\n    permissionsOwner {\\n      ...PermissionFields\\n      __typename\\n    }\\n    permissions {\\n      ...PermissionFields\\n      __typename\\n    }\\n    mysqlDb {\\n      ...MysqlDbFields\\n      __typename\\n    }\\n    __typename\\n  }\\n  service {\\n    config {\\n      rsid {\\n        id\\n        region\\n        __typename\\n      }\\n      type\\n      hwId\\n      state\\n      ftpUser\\n      ftpPort\\n      ftpPassword\\n      ftpReadOnly\\n      ipAddress\\n      rconPort\\n      queryPort\\n      autoBackup\\n      dnsNames\\n      currentVersion\\n      targetVersion\\n      __typename\\n    }\\n    latestRev {\\n      id\\n      created\\n      __typename\\n    }\\n    maxSlots\\n    files\\n    memory {\\n      base\\n      effective\\n      __typename\\n    }\\n    currentState {\\n      ...ServiceStateFields\\n      __typename\\n    }\\n    backups {\\n      id\\n      userSize\\n      created\\n      isAutoBackup\\n      __typename\\n    }\\n    restartSchedule {\\n      ...RestartTaskFields\\n      __typename\\n    }\\n    dnsAvailableTlds\\n    __typename\\n  }\\n  admin {\\n    hardwareGuacamoleConnection {\\n      url\\n      __typename\\n    }\\n    __typename\\n  }\\n  profile {\\n    __typename\\n    ... on ProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on MinecraftProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        additionalPorts\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      worlds\\n      addonRam\\n      isRamServer\\n      ramOrderCreationDate\\n      ramStopTimeUtc\\n      isConnectedToBungeecord\\n      bungeecordServerUrl\\n      executables {\\n        id\\n        name\\n        key\\n        default\\n        __typename\\n      }\\n      mods {\\n        id\\n        repoKey\\n        name\\n        image\\n        mindRam\\n        projectUrl\\n        revisions {\\n          id\\n          created\\n          executableId\\n          extraData\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on CsgoProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        gotvPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      selectedWorkshopItems {\\n        ...SteamWorkshopItemFields\\n        __typename\\n      }\\n      installedMaps {\\n        name\\n        displayName\\n        workshopItem {\\n          ...SteamWorkshopItemFields\\n          __typename\\n        }\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on ValheimProfileNamespace {\\n      name\\n      cfgFiles\\n      clientLink\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on HellLetLooseProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        statsPort\\n        beaconPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on SevenDaysToDieProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        telnetPort\\n        webDashboardPort\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      availableMods {\\n        ...SevenDaysModFields\\n        __typename\\n      }\\n      isModUpdateAvailable\\n      __typename\\n    }\\n    ... on SoulmaskProfileNamespace {\\n      name\\n      cfgFiles\\n      gameUid\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on VRisingProfileNamespace {\\n      name\\n      cfgFiles\\n      isLaunchServer\\n      isOfficialServer\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      __typename\\n    }\\n    ... on RustConsoleProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      modifyActionHints\\n      __typename\\n    }\\n    ... on FarmingSimulatorProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      wiLink\\n      defaultModSpace\\n      masterWiLink\\n      displayPorts {\\n        rconPort\\n        queryPort\\n        webPort\\n        __typename\\n      }\\n      mapParams {\\n        ...MapParams\\n        __typename\\n      }\\n      __typename\\n    }\\n    ... on BungeecordProfileNamespace {\\n      name\\n      cfgFiles\\n      logFiles\\n      publicConfigs\\n      configDefinition\\n      displayPorts {\\n        ...DisplayPortFields\\n        __typename\\n      }\\n      enableCustomerDb\\n      enableCustomHostnames\\n      gpServers\\n      accessibleMinecraftServers {\\n        ...GameServerFields\\n        __typename\\n      }\\n      __typename\\n    }\\n  }\\n  __typename\\n}\",\n        }),\n      });\n\n      if (!response.ok) {\n        ServerUtils.error(\n          this._manager,\n          `[${identifier}] Failed To Fetch Server Status: ${response.status} ${response.statusText}`\n        );\n        return null;\n      }\n\n      const data = await response.json();\n      return data?.data?.cfgContext?.ns?.service?.currentState\n        ?.state as RustServer[\"status\"];\n    } catch (error) {\n      ServerUtils.error(\n        this._manager,\n        `[${identifier}] Failed To Fetch Server Status: ${error.message}`\n      );\n      return null;\n    }\n  }\n\n  private async fetchId(identifier: string, sid: number, region: \"EU\" | \"US\") {\n    const token = this._auth?.accessToken;\n    if (!token) {\n      ServerUtils.error(\n        this._manager,\n        `[${identifier}] Failed To Fetch Server ID: No Access Token`\n      );\n      return null;\n    }\n\n    this._manager.logger.debug(`[${identifier}] Fetching Server ID`);\n\n    try {\n      const response = await fetch(GPortalRoutes.Api, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({\n          operationName: \"sid\",\n          variables: {\n            gameserverId: sid,\n            region,\n          },\n          query:\n            \"query sid($gameserverId: Int!, $region: REGION!) {\\n  sid(gameserverId: $gameserverId, region: $region)\\n}\",\n        }),\n      });\n\n      if (!response.ok) {\n        ServerUtils.error(\n          this._manager,\n          `[${identifier}] Failed To Fetch Server ID: ${response.status} ${response.statusText}`\n        );\n        return null;\n      }\n\n      const data = await response.json();\n      if (data?.errors?.length) {\n        this._manager.logger.warn(\n          `[${identifier}] Failed To Fetch Server ID: ${data.errors[0].message}`\n        );\n        return null;\n      }\n\n      const serverId = data?.data?.sid as number;\n      if (!serverId) {\n        ServerUtils.error(\n          this._manager,\n          `[${identifier}] Failed To Fetch Server ID: Invalid SID`\n        );\n        return null;\n      }\n\n      return serverId;\n    } catch (error) {\n      ServerUtils.error(\n        this._manager,\n        `[${identifier}] Failed To Fetch Server ID: ${error.message}`\n      );\n      return null;\n    }\n  }\n}\n"]}
>>>>>>> 508075350914bd07d7cbb029c0de67589b4af1b0
